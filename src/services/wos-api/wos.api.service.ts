/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming


import { IWOSAPIConfig } from "../IWOSAPIConfig";
import { AuthorizedApiBase } from "./AuthorizedApiBase";


export class WOSApiClient extends AuthorizedApiBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: IWOSAPIConfig, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://test1-acorn.demo.wealthos.cloud";
    }

    /**
     * Get a temp token that can be shared with the GUI.
     * @return A temp key that can be used by the GUI to access certain access paths
     */
    getWOSToken(): Promise<Anonymous> {
        let url_ = this.baseUrl + "/tenant/getWOSToken";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetWOSToken(_response);
        });
    }

    protected processGetWOSToken(response: Response): Promise<Anonymous> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous>(<any>null);
    }

    /**
     * Wealth Manager Greeting for BE
     * @return A greeting message which identifies the tenant
     */
    getBEGreeting(): Promise<Anonymous5> {
        let url_ = this.baseUrl + "/tenant/test/hello-world-be";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetBEGreeting(_response);
        });
    }

    protected processGetBEGreeting(response: Response): Promise<Anonymous5> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous5>(<any>null);
    }

    /**
     * Wealth Manager Greeting for GUI
     * @return A greeting message which identifies the tenant
     */
    getFEGreeting(): Promise<Anonymous9> {
        let url_ = this.baseUrl + "/tenant/test/hello-world-gui";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetFEGreeting(_response);
        });
    }

    protected processGetFEGreeting(response: Response): Promise<Anonymous9> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous9>(<any>null);
    }

    /**
     * Get All Investors
     * @return success
     */
    getAllInvestors(): Promise<Anonymous13> {
        let url_ = this.baseUrl + "/tenant/investors/v1";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetAllInvestors(_response);
        });
    }

    protected processGetAllInvestors(response: Response): Promise<Anonymous13> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous13.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("Request is not complete and may have one or more validations errors. Please check the error message and the code", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous13>(<any>null);
    }

    /**
     * Create Investor
     * @return Resource created
     */
    createInvestor(body: Body): Promise<Anonymous19> {
        let url_ = this.baseUrl + "/tenant/investors/v1";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreateInvestor(_response);
        });
    }

    protected processCreateInvestor(response: Response): Promise<Anonymous19> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 !== undefined ? resultData201 : <any>null;
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("Request is not complete and may have one or more validations errors. Please check the error message and the code", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous19>(<any>null);
    }

    /**
     * Get Investor
     * @param investor_id Investor Id
     * @return success
     */
    getInvestor(investor_id: string): Promise<Anonymous25> {
        let url_ = this.baseUrl + "/tenant/investors/v1/{investor_id}";
        if (investor_id === undefined || investor_id === null)
            throw new Error("The parameter 'investor_id' must be defined.");
        url_ = url_.replace("{investor_id}", encodeURIComponent("" + investor_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetInvestor(_response);
        });
    }

    protected processGetInvestor(response: Response): Promise<Anonymous25> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("Request is not complete and may have one or more validations errors. Please check the error message and the code", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("The specified resource was not found", status, _responseText, _headers, result404);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous25>(<any>null);
    }

    /**
     * Create new Investment Pot
     * @param investor_id Investor Id
     * @return success
     */
    createInvestorPot(body: Body2, investor_id: string): Promise<Anonymous32> {
        let url_ = this.baseUrl + "/tenant/investors/v1/{investor_id}/createPot";
        if (investor_id === undefined || investor_id === null)
            throw new Error("The parameter 'investor_id' must be defined.");
        url_ = url_.replace("{investor_id}", encodeURIComponent("" + investor_id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreateInvestorPot(_response);
        });
    }

    protected processCreateInvestorPot(response: Response): Promise<Anonymous32> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 !== undefined ? resultData201 : <any>null;
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("Request is not complete and may have one or more validations errors. Please check the error message and the code", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous32>(<any>null);
    }

    /**
     * Get all pots for an investor
     * @param investor_id Investor Id
     * @return success
     */
    getPots(investor_id: string): Promise<Anonymous38> {
        let url_ = this.baseUrl + "/tenant/investors/v1/{investor_id}/getPots";
        if (investor_id === undefined || investor_id === null)
            throw new Error("The parameter 'investor_id' must be defined.");
        url_ = url_.replace("{investor_id}", encodeURIComponent("" + investor_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetPots(_response);
        });
    }

    protected processGetPots(response: Response): Promise<Anonymous38> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous38.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("The specified resource was not found", status, _responseText, _headers, result404);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous38>(<any>null);
    }

    /**
     * Create new Portfolio template
     * @param investor_id Investor Id
     * @return success
     */
    createInvestorPortfolioTemplate(body: Body3, investor_id: string): Promise<Anonymous44> {
        let url_ = this.baseUrl + "/tenant/investors/v1/{investor_id}/createPortfolioTemplate";
        if (investor_id === undefined || investor_id === null)
            throw new Error("The parameter 'investor_id' must be defined.");
        url_ = url_.replace("{investor_id}", encodeURIComponent("" + investor_id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreateInvestorPortfolioTemplate(_response);
        });
    }

    protected processCreateInvestorPortfolioTemplate(response: Response): Promise<Anonymous44> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 !== undefined ? resultData201 : <any>null;
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("Request is not complete and may have one or more validations errors. Please check the error message and the code", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous44>(<any>null);
    }

    /**
     * Get Portfolio templates
     * @param investor_id Investor Id
     * @return success
     */
    getPortfolioTemplates(investor_id: string): Promise<Anonymous50> {
        let url_ = this.baseUrl + "/tenant/investors/v1/{investor_id}/getPortfolioTemplates";
        if (investor_id === undefined || investor_id === null)
            throw new Error("The parameter 'investor_id' must be defined.");
        url_ = url_.replace("{investor_id}", encodeURIComponent("" + investor_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetPortfolioTemplates(_response);
        });
    }

    protected processGetPortfolioTemplates(response: Response): Promise<Anonymous50> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous50.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("The specified resource was not found", status, _responseText, _headers, result404);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous50>(<any>null);
    }

    /**
     * Get remaining investable amount
     * @param investor_id Id of the investor
     * @param product_type Financial product type
     * @return success
     */
    getMaximumRemainingInvestmentableAmount(investor_id: string, product_type: Product_type): Promise<Anonymous56> {
        let url_ = this.baseUrl + "/tenant/investors/v1/{investor_id}/getMaximumRemainingInvestmentableAmount?";
        if (investor_id === undefined || investor_id === null)
            throw new Error("The parameter 'investor_id' must be defined.");
        url_ = url_.replace("{investor_id}", encodeURIComponent("" + investor_id));
        if (product_type === undefined || product_type === null)
            throw new Error("The parameter 'product_type' must be defined and cannot be null.");
        else
            url_ += "product_type=" + encodeURIComponent("" + product_type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetMaximumRemainingInvestmentableAmount(_response);
        });
    }

    protected processGetMaximumRemainingInvestmentableAmount(response: Response): Promise<Anonymous56> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous56.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("The specified resource was not found", status, _responseText, _headers, result404);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous56>(<any>null);
    }

    /**
     * Invoke KYC process for the investor
     * @param investor_id Investor Id
     * @return success
     */
    invokeInvestorKYC(investor_id: string): Promise<Anonymous62> {
        let url_ = this.baseUrl + "/tenant/investors/v1/{investor_id}/invokeKYC";
        if (investor_id === undefined || investor_id === null)
            throw new Error("The parameter 'investor_id' must be defined.");
        url_ = url_.replace("{investor_id}", encodeURIComponent("" + investor_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processInvokeInvestorKYC(_response);
        });
    }

    protected processInvokeInvestorKYC(response: Response): Promise<Anonymous62> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("Request is not complete and may have one or more validations errors. Please check the error message and the code", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous62>(<any>null);
    }

    /**
     * Get All Financial Products
     * @return A paged array of financial products
     */
    getAllFinancialProducts(): Promise<Anonymous68> {
        let url_ = this.baseUrl + "/tenant/financial-products/v1";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetAllFinancialProducts(_response);
        });
    }

    protected processGetAllFinancialProducts(response: Response): Promise<Anonymous68> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous68.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("Request is not complete and may have one or more validations errors. Please check the error message and the code", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("The specified resource was not found", status, _responseText, _headers, result404);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous68>(<any>null);
    }

    /**
     * Get All Payments
     * @return A paged array of Payments
     */
    getAllPayments(): Promise<Anonymous75> {
        let url_ = this.baseUrl + "/tenant/payments/v1/";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetAllPayments(_response);
        });
    }

    protected processGetAllPayments(response: Response): Promise<Anonymous75> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous75.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("Request is not complete and may have one or more validations errors. Please check the error message and the code", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("The specified resource was not found", status, _responseText, _headers, result404);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous75>(<any>null);
    }

    /**
     * Create Payment Intent
     * @return Resource created
     */
    createPaymentIntent(body: Body4): Promise<Anonymous82> {
        let url_ = this.baseUrl + "/tenant/payments/v1/intent";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreatePaymentIntent(_response);
        });
    }

    protected processCreatePaymentIntent(response: Response): Promise<Anonymous82> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 !== undefined ? resultData201 : <any>null;
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("Request is not complete and may have one or more validations errors. Please check the error message and the code", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 412) {
            return response.text().then((_responseText) => {
            let result412: any = null;
            let resultData412 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result412 = resultData412 !== undefined ? resultData412 : <any>null;
            return throwException("Duplicate request", status, _responseText, _headers, result412);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous82>(<any>null);
    }

    /**
     * Create new pot
     * @param body (optional) 
     * @return success
     */
    createPot(body: Body5 | undefined): Promise<Anonymous89> {
        let url_ = this.baseUrl + "/tenant/pots/v1";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreatePot(_response);
        });
    }

    protected processCreatePot(response: Response): Promise<Anonymous89> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 !== undefined ? resultData201 : <any>null;
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("Request is not complete and may have one or more validations errors. Please check the error message and the code", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous89>(<any>null);
    }

    /**
     * Retrive existing pot from pot id
     * @param pot_id Pot Id
     * @return success
     */
    getPot(pot_id: string): Promise<Anonymous95> {
        let url_ = this.baseUrl + "/tenant/pots/v1/{pot_id}";
        if (pot_id === undefined || pot_id === null)
            throw new Error("The parameter 'pot_id' must be defined.");
        url_ = url_.replace("{pot_id}", encodeURIComponent("" + pot_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetPot(_response);
        });
    }

    protected processGetPot(response: Response): Promise<Anonymous95> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("The specified resource was not found", status, _responseText, _headers, result404);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous95>(<any>null);
    }

    /**
     * Get current value of a pot
     * @param pot_id Pot Id
     * @return success
     */
    getPotValue(pot_id: string): Promise<Anonymous101> {
        let url_ = this.baseUrl + "/tenant/pots/v1/{pot_id}/getValue";
        if (pot_id === undefined || pot_id === null)
            throw new Error("The parameter 'pot_id' must be defined.");
        url_ = url_.replace("{pot_id}", encodeURIComponent("" + pot_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetPotValue(_response);
        });
    }

    protected processGetPotValue(response: Response): Promise<Anonymous101> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("The specified resource was not found", status, _responseText, _headers, result404);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous101>(<any>null);
    }

    /**
     * Get current holdings and past transactions of a pot
     * @param pot_id Pot Id
     * @return success
     */
    getPotHoldings(pot_id: string): Promise<Anonymous107> {
        let url_ = this.baseUrl + "/tenant/pots/v1/{pot_id}/getHoldings";
        if (pot_id === undefined || pot_id === null)
            throw new Error("The parameter 'pot_id' must be defined.");
        url_ = url_.replace("{pot_id}", encodeURIComponent("" + pot_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetPotHoldings(_response);
        });
    }

    protected processGetPotHoldings(response: Response): Promise<Anonymous107> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("The specified resource was not found", status, _responseText, _headers, result404);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous107>(<any>null);
    }

    /**
     * Assign new portfolio template to a pot
     * @param body (optional) 
     * @param pot_id Pot Id
     * @return success
     */
    assignPortfolioTemplate(body: Body6 | undefined, pot_id: string): Promise<Anonymous113> {
        let url_ = this.baseUrl + "/tenant/pots/v1/{pot_id}/assignPortfolioTemplate";
        if (pot_id === undefined || pot_id === null)
            throw new Error("The parameter 'pot_id' must be defined.");
        url_ = url_.replace("{pot_id}", encodeURIComponent("" + pot_id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAssignPortfolioTemplate(_response);
        });
    }

    protected processAssignPortfolioTemplate(response: Response): Promise<Anonymous113> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("Request is not complete and may have one or more validations errors. Please check the error message and the code", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("The specified resource was not found", status, _responseText, _headers, result404);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous113>(<any>null);
    }

    /**
     * Get total value of all pots of an investor
     * @param investor_id Id of the investor
     * @return success
     */
    getTotalPotValue(investor_id: string): Promise<Anonymous120> {
        let url_ = this.baseUrl + "/tenant/pots/v1/all/getValue?";
        if (investor_id === undefined || investor_id === null)
            throw new Error("The parameter 'investor_id' must be defined and cannot be null.");
        else
            url_ += "investor_id=" + encodeURIComponent("" + investor_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetTotalPotValue(_response);
        });
    }

    protected processGetTotalPotValue(response: Response): Promise<Anonymous120> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("The specified resource was not found", status, _responseText, _headers, result404);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous120>(<any>null);
    }

    /**
     * Get total holdings of an Investor
     * @param investor_id Id of the investor
     * @return success
     */
    getTotalPotHoldings(investor_id: string): Promise<Anonymous126> {
        let url_ = this.baseUrl + "/tenant/pots/v1/all/getHoldings?";
        if (investor_id === undefined || investor_id === null)
            throw new Error("The parameter 'investor_id' must be defined and cannot be null.");
        else
            url_ += "investor_id=" + encodeURIComponent("" + investor_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetTotalPotHoldings(_response);
        });
    }

    protected processGetTotalPotHoldings(response: Response): Promise<Anonymous126> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("The specified resource was not found", status, _responseText, _headers, result404);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous126>(<any>null);
    }

    /**
     * Get Configured Investment Products
     * @return success
     */
    getConfiguredInvestmentProducts(): Promise<Anonymous132> {
        let url_ = this.baseUrl + "/tenant/investment-products/v1";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetConfiguredInvestmentProducts(_response);
        });
    }

    protected processGetConfiguredInvestmentProducts(response: Response): Promise<Anonymous132> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous132.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("The specified resource was not found", status, _responseText, _headers, result404);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous132>(<any>null);
    }

    /**
     * Get Current Prices of all Investment Products
     * @return success
     */
    getConfiguredInvestmentProductPrices(): Promise<Anonymous138> {
        let url_ = this.baseUrl + "/tenant/investment-products/v1/getCurrentPrices";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetConfiguredInvestmentProductPrices(_response);
        });
    }

    protected processGetConfiguredInvestmentProductPrices(response: Response): Promise<Anonymous138> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous138.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("The specified resource was not found", status, _responseText, _headers, result404);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous138>(<any>null);
    }

    /**
     * Get details of a given Investment Product
     * @param category_id Investment Product Category Id
     * @param investment_product_id Investment Product Id
     * @return success
     */
    getInvestmentProduct(category_id: Category_id, investment_product_id: string): Promise<Anonymous144> {
        let url_ = this.baseUrl + "/tenant/investment-products/v1/{category_id}/{investment_product_id}";
        if (category_id === undefined || category_id === null)
            throw new Error("The parameter 'category_id' must be defined.");
        url_ = url_.replace("{category_id}", encodeURIComponent("" + category_id));
        if (investment_product_id === undefined || investment_product_id === null)
            throw new Error("The parameter 'investment_product_id' must be defined.");
        url_ = url_.replace("{investment_product_id}", encodeURIComponent("" + investment_product_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetInvestmentProduct(_response);
        });
    }

    protected processGetInvestmentProduct(response: Response): Promise<Anonymous144> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("The specified resource was not found", status, _responseText, _headers, result404);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous144>(<any>null);
    }

    /**
     * Get Current Price of an Investment Product
     * @param category_id Investment Product Category Id
     * @param investment_product_id Investment Product Id
     * @return success
     */
    getInvestmentProductPrice(category_id: Category_id2, investment_product_id: string): Promise<Anonymous150> {
        let url_ = this.baseUrl + "/tenant/investment-products/v1/{category_id}/{investment_product_id}/getCurrentPrice";
        if (category_id === undefined || category_id === null)
            throw new Error("The parameter 'category_id' must be defined.");
        url_ = url_.replace("{category_id}", encodeURIComponent("" + category_id));
        if (investment_product_id === undefined || investment_product_id === null)
            throw new Error("The parameter 'investment_product_id' must be defined.");
        url_ = url_.replace("{investment_product_id}", encodeURIComponent("" + investment_product_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetInvestmentProductPrice(_response);
        });
    }

    protected processGetInvestmentProductPrice(response: Response): Promise<Anonymous150> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("The specified resource was not found", status, _responseText, _headers, result404);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous150>(<any>null);
    }

    /**
     * Get all the Portfolio templates
     * @return success
     */
    getAllPortfolioTemplates(): Promise<Anonymous156> {
        let url_ = this.baseUrl + "/tenant/portfolio-templates/v1/";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetAllPortfolioTemplates(_response);
        });
    }

    protected processGetAllPortfolioTemplates(response: Response): Promise<Anonymous156> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous156.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("The specified resource was not found", status, _responseText, _headers, result404);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous156>(<any>null);
    }

    /**
     * Create new Portfolio Template
     * @return success
     */
    createPortfolioTemplate(body: Body7): Promise<Anonymous162> {
        let url_ = this.baseUrl + "/tenant/portfolio-templates/v1/";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreatePortfolioTemplate(_response);
        });
    }

    protected processCreatePortfolioTemplate(response: Response): Promise<Anonymous162> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 !== undefined ? resultData201 : <any>null;
            return result201;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("The specified resource was not found", status, _responseText, _headers, result404);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous162>(<any>null);
    }

    /**
     * Retrive existing Portfolio template
     * @param portfolio_template_id Portfolio ID
     * @return success
     */
    getPortfolioTemplate(portfolio_template_id: string): Promise<Anonymous168> {
        let url_ = this.baseUrl + "/tenant/portfolio-templates/v1/{portfolio_template_id}";
        if (portfolio_template_id === undefined || portfolio_template_id === null)
            throw new Error("The parameter 'portfolio_template_id' must be defined.");
        url_ = url_.replace("{portfolio_template_id}", encodeURIComponent("" + portfolio_template_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetPortfolioTemplate(_response);
        });
    }

    protected processGetPortfolioTemplate(response: Response): Promise<Anonymous168> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("The specified resource was not found", status, _responseText, _headers, result404);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous168>(<any>null);
    }

    /**
     * Update existing Portfolio template
     * @param portfolio_template_id Portfolio ID
     * @return success
     */
    updatePortfolioTemplate(body: Body8, portfolio_template_id: string): Promise<Anonymous174> {
        let url_ = this.baseUrl + "/tenant/portfolio-templates/v1/{portfolio_template_id}";
        if (portfolio_template_id === undefined || portfolio_template_id === null)
            throw new Error("The parameter 'portfolio_template_id' must be defined.");
        url_ = url_.replace("{portfolio_template_id}", encodeURIComponent("" + portfolio_template_id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processUpdatePortfolioTemplate(_response);
        });
    }

    protected processUpdatePortfolioTemplate(response: Response): Promise<Anonymous174> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("The specified resource was not found", status, _responseText, _headers, result404);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous174>(<any>null);
    }

    /**
     * Execute Buy Transaction(s)
     * @param body (optional) 
     * @return success
     */
    executeBuyTrasaction(body: Body9 | undefined): Promise<Anonymous180> {
        let url_ = this.baseUrl + "/tenant/transactions/v1/buy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processExecuteBuyTrasaction(_response);
        });
    }

    protected processExecuteBuyTrasaction(response: Response): Promise<Anonymous180> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("Request is not complete and may have one or more validations errors. Please check the error message and the code", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("The specified resource was not found", status, _responseText, _headers, result404);
            });
        } else if (status === 412) {
            return response.text().then((_responseText) => {
            let result412: any = null;
            let resultData412 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result412 = resultData412 !== undefined ? resultData412 : <any>null;
            return throwException("Duplicate request", status, _responseText, _headers, result412);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous180>(<any>null);
    }

    /**
     * Execute Sell Transaction(s)
     * @param body (optional) 
     * @return success
     */
    executeSellTrasaction(body: Body10 | undefined): Promise<Anonymous188> {
        let url_ = this.baseUrl + "/tenant/transactions/v1/sell";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processExecuteSellTrasaction(_response);
        });
    }

    protected processExecuteSellTrasaction(response: Response): Promise<Anonymous188> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("Request is not complete and may have one or more validations errors. Please check the error message and the code", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("You do not have permissions to access this resource.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = resultData403 !== undefined ? resultData403 : <any>null;
            return throwException("Your authentication information is missing or invalid. Please check the keys are properly set and its correct", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("The specified resource was not found", status, _responseText, _headers, result404);
            });
        } else if (status === 412) {
            return response.text().then((_responseText) => {
            let result412: any = null;
            let resultData412 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result412 = resultData412 !== undefined ? resultData412 : <any>null;
            return throwException("Duplicate request", status, _responseText, _headers, result412);
            });
        } else if (status === 429) {
            return response.text().then((_responseText) => {
            let result429: any = null;
            let resultData429 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result429 = resultData429 !== undefined ? resultData429 : <any>null;
            return throwException("You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support", status, _responseText, _headers, result429);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = resultData500 !== undefined ? resultData500 : <any>null;
            return throwException("System error. Retry later. If the error persist, contact WOS support", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous188>(<any>null);
    }
}

export class ForbiddenError implements IForbiddenError {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IForbiddenError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ForbiddenError {
        data = typeof data === 'object' ? data : {};
        let result = new ForbiddenError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IForbiddenError {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class IdempotencyError implements IIdempotencyError {
    /** Human readable description of the error */
    message!: string;
    /** Current status of the original request */
    status!: IdempotencyErrorStatus;
    /** Stringified original response body if status is `COMPLETE` */
    response?: any;

    constructor(data?: IIdempotencyError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.status = _data["status"];
            this.response = _data["response"];
        }
    }

    static fromJS(data: any): IdempotencyError {
        data = typeof data === 'object' ? data : {};
        let result = new IdempotencyError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["status"] = this.status;
        data["response"] = this.response;
        return data; 
    }
}

export interface IIdempotencyError {
    /** Human readable description of the error */
    message: string;
    /** Current status of the original request */
    status: IdempotencyErrorStatus;
    /** Stringified original response body if status is `COMPLETE` */
    response?: any;
}

export class SystemError implements ISystemError {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: ISystemError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): SystemError {
        data = typeof data === 'object' ? data : {};
        let result = new SystemError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface ISystemError {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class DefaultError implements IDefaultError {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IDefaultError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): DefaultError {
        data = typeof data === 'object' ? data : {};
        let result = new DefaultError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IDefaultError {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

/** JSON for the Investor resource type */
export class Investor implements IInvestor {
    investor_id!: string;
    title!: string;
    gender!: string;
    first_name!: string;
    last_name!: string;
    readonly status?: InvestorStatus;
    email!: string;
    mobile_number!: string;
    home_number!: string;
    office_number!: string;
    nationality!: InvestorNationality;
    national_insurance_number!: string;
    readonly kyc_aml_status?: InvestorKyc_aml_status;
    readonly dealing_status?: InvestorDealing_status;
    id_numbers!: Id_numbers[];
    address!: Address;
    mifid_tax_id!: string;
    uk_tax_resident!: boolean;
    date_of_birth!: Date_of_birth;
    readonly kyc_aml_status_last_updated?: Date;
    readonly created_at?: Date;
    readonly deleted_at?: Date;

    constructor(data?: IInvestor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.id_numbers = [];
            this.address = new Address();
            this.date_of_birth = new Date_of_birth();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.investor_id = _data["investor_id"];
            this.title = _data["title"];
            this.gender = _data["gender"];
            this.first_name = _data["first_name"];
            this.last_name = _data["last_name"];
            (<any>this).status = _data["status"];
            this.email = _data["email"];
            this.mobile_number = _data["mobile_number"];
            this.home_number = _data["home_number"];
            this.office_number = _data["office_number"];
            this.nationality = _data["nationality"];
            this.national_insurance_number = _data["national_insurance_number"];
            (<any>this).kyc_aml_status = _data["kyc_aml_status"];
            (<any>this).dealing_status = _data["dealing_status"];
            if (Array.isArray(_data["id_numbers"])) {
                this.id_numbers = [] as any;
                for (let item of _data["id_numbers"])
                    this.id_numbers!.push(Id_numbers.fromJS(item));
            }
            this.address = _data["address"] ? Address.fromJS(_data["address"]) : new Address();
            this.mifid_tax_id = _data["mifid_tax_id"];
            this.uk_tax_resident = _data["uk_tax_resident"];
            this.date_of_birth = _data["date_of_birth"] ? Date_of_birth.fromJS(_data["date_of_birth"]) : new Date_of_birth();
            (<any>this).kyc_aml_status_last_updated = _data["kyc_aml_status_last_updated"] ? new Date(_data["kyc_aml_status_last_updated"].toString()) : <any>undefined;
            (<any>this).created_at = _data["created_at"] ? new Date(_data["created_at"].toString()) : <any>undefined;
            (<any>this).deleted_at = _data["deleted_at"] ? new Date(_data["deleted_at"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Investor {
        data = typeof data === 'object' ? data : {};
        let result = new Investor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investor_id"] = this.investor_id;
        data["title"] = this.title;
        data["gender"] = this.gender;
        data["first_name"] = this.first_name;
        data["last_name"] = this.last_name;
        data["status"] = this.status;
        data["email"] = this.email;
        data["mobile_number"] = this.mobile_number;
        data["home_number"] = this.home_number;
        data["office_number"] = this.office_number;
        data["nationality"] = this.nationality;
        data["national_insurance_number"] = this.national_insurance_number;
        data["kyc_aml_status"] = this.kyc_aml_status;
        data["dealing_status"] = this.dealing_status;
        if (Array.isArray(this.id_numbers)) {
            data["id_numbers"] = [];
            for (let item of this.id_numbers)
                data["id_numbers"].push(item.toJSON());
        }
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["mifid_tax_id"] = this.mifid_tax_id;
        data["uk_tax_resident"] = this.uk_tax_resident;
        data["date_of_birth"] = this.date_of_birth ? this.date_of_birth.toJSON() : <any>undefined;
        data["kyc_aml_status_last_updated"] = this.kyc_aml_status_last_updated ? this.kyc_aml_status_last_updated.toISOString() : <any>undefined;
        data["created_at"] = this.created_at ? this.created_at.toISOString() : <any>undefined;
        data["deleted_at"] = this.deleted_at ? this.deleted_at.toISOString() : <any>undefined;
        return data; 
    }
}

/** JSON for the Investor resource type */
export interface IInvestor {
    investor_id: string;
    title: string;
    gender: string;
    first_name: string;
    last_name: string;
    status?: InvestorStatus;
    email: string;
    mobile_number: string;
    home_number: string;
    office_number: string;
    nationality: InvestorNationality;
    national_insurance_number: string;
    kyc_aml_status?: InvestorKyc_aml_status;
    dealing_status?: InvestorDealing_status;
    id_numbers: Id_numbers[];
    address: Address;
    mifid_tax_id: string;
    uk_tax_resident: boolean;
    date_of_birth: Date_of_birth;
    kyc_aml_status_last_updated?: Date;
    created_at?: Date;
    deleted_at?: Date;
}

/** JSON for the Investor resource type */
export class Body implements IBody {
    investor_id!: string;
    title!: string;
    gender!: string;
    first_name!: string;
    last_name!: string;
    readonly status?: BodyStatus;
    email!: string;
    mobile_number!: string;
    home_number!: string;
    office_number!: string;
    nationality!: BodyNationality;
    national_insurance_number!: string;
    readonly kyc_aml_status?: BodyKyc_aml_status;
    readonly dealing_status?: BodyDealing_status;
    id_numbers!: Id_numbers2[];
    address!: Address2;
    mifid_tax_id!: string;
    uk_tax_resident!: boolean;
    date_of_birth!: Date_of_birth2;
    readonly kyc_aml_status_last_updated?: Date;
    readonly created_at?: Date;
    readonly deleted_at?: Date;

    constructor(data?: IBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.id_numbers = [];
            this.address = new Address2();
            this.date_of_birth = new Date_of_birth2();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.investor_id = _data["investor_id"];
            this.title = _data["title"];
            this.gender = _data["gender"];
            this.first_name = _data["first_name"];
            this.last_name = _data["last_name"];
            (<any>this).status = _data["status"];
            this.email = _data["email"];
            this.mobile_number = _data["mobile_number"];
            this.home_number = _data["home_number"];
            this.office_number = _data["office_number"];
            this.nationality = _data["nationality"];
            this.national_insurance_number = _data["national_insurance_number"];
            (<any>this).kyc_aml_status = _data["kyc_aml_status"];
            (<any>this).dealing_status = _data["dealing_status"];
            if (Array.isArray(_data["id_numbers"])) {
                this.id_numbers = [] as any;
                for (let item of _data["id_numbers"])
                    this.id_numbers!.push(Id_numbers2.fromJS(item));
            }
            this.address = _data["address"] ? Address2.fromJS(_data["address"]) : new Address2();
            this.mifid_tax_id = _data["mifid_tax_id"];
            this.uk_tax_resident = _data["uk_tax_resident"];
            this.date_of_birth = _data["date_of_birth"] ? Date_of_birth2.fromJS(_data["date_of_birth"]) : new Date_of_birth2();
            (<any>this).kyc_aml_status_last_updated = _data["kyc_aml_status_last_updated"] ? new Date(_data["kyc_aml_status_last_updated"].toString()) : <any>undefined;
            (<any>this).created_at = _data["created_at"] ? new Date(_data["created_at"].toString()) : <any>undefined;
            (<any>this).deleted_at = _data["deleted_at"] ? new Date(_data["deleted_at"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Body {
        data = typeof data === 'object' ? data : {};
        let result = new Body();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investor_id"] = this.investor_id;
        data["title"] = this.title;
        data["gender"] = this.gender;
        data["first_name"] = this.first_name;
        data["last_name"] = this.last_name;
        data["status"] = this.status;
        data["email"] = this.email;
        data["mobile_number"] = this.mobile_number;
        data["home_number"] = this.home_number;
        data["office_number"] = this.office_number;
        data["nationality"] = this.nationality;
        data["national_insurance_number"] = this.national_insurance_number;
        data["kyc_aml_status"] = this.kyc_aml_status;
        data["dealing_status"] = this.dealing_status;
        if (Array.isArray(this.id_numbers)) {
            data["id_numbers"] = [];
            for (let item of this.id_numbers)
                data["id_numbers"].push(item.toJSON());
        }
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["mifid_tax_id"] = this.mifid_tax_id;
        data["uk_tax_resident"] = this.uk_tax_resident;
        data["date_of_birth"] = this.date_of_birth ? this.date_of_birth.toJSON() : <any>undefined;
        data["kyc_aml_status_last_updated"] = this.kyc_aml_status_last_updated ? this.kyc_aml_status_last_updated.toISOString() : <any>undefined;
        data["created_at"] = this.created_at ? this.created_at.toISOString() : <any>undefined;
        data["deleted_at"] = this.deleted_at ? this.deleted_at.toISOString() : <any>undefined;
        return data; 
    }
}

/** JSON for the Investor resource type */
export interface IBody {
    investor_id: string;
    title: string;
    gender: string;
    first_name: string;
    last_name: string;
    status?: BodyStatus;
    email: string;
    mobile_number: string;
    home_number: string;
    office_number: string;
    nationality: BodyNationality;
    national_insurance_number: string;
    kyc_aml_status?: BodyKyc_aml_status;
    dealing_status?: BodyDealing_status;
    id_numbers: Id_numbers2[];
    address: Address2;
    mifid_tax_id: string;
    uk_tax_resident: boolean;
    date_of_birth: Date_of_birth2;
    kyc_aml_status_last_updated?: Date;
    created_at?: Date;
    deleted_at?: Date;
}

export class Body2 implements IBody2 {
    readonly investor_id?: string;
    /** system generated id `pt-XXXX-XXXX-XXXX-XXXX` */
    readonly pot_id?: string;
    pot_name!: string;
    financial_product_id!: string;
    portfolio_id?: string;

    constructor(data?: IBody2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).investor_id = _data["investor_id"];
            (<any>this).pot_id = _data["pot_id"];
            this.pot_name = _data["pot_name"];
            this.financial_product_id = _data["financial_product_id"];
            this.portfolio_id = _data["portfolio_id"];
        }
    }

    static fromJS(data: any): Body2 {
        data = typeof data === 'object' ? data : {};
        let result = new Body2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investor_id"] = this.investor_id;
        data["pot_id"] = this.pot_id;
        data["pot_name"] = this.pot_name;
        data["financial_product_id"] = this.financial_product_id;
        data["portfolio_id"] = this.portfolio_id;
        return data; 
    }
}

export interface IBody2 {
    investor_id?: string;
    /** system generated id `pt-XXXX-XXXX-XXXX-XXXX` */
    pot_id?: string;
    pot_name: string;
    financial_product_id: string;
    portfolio_id?: string;
}

export class Body3 implements IBody3 {
    readonly investor_id!: string;
    readonly owner!: Body3Owner;
    /** system generated id `pft-XXXX-XXXX-XXXX-XXXX` */
    readonly portfolio_id?: string;
    portfolio_name!: string;
    readonly version?: number;
    ratios!: Ratios[];

    constructor(data?: IBody3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.ratios = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).investor_id = _data["investor_id"];
            (<any>this).owner = _data["owner"];
            (<any>this).portfolio_id = _data["portfolio_id"];
            this.portfolio_name = _data["portfolio_name"];
            (<any>this).version = _data["version"];
            if (Array.isArray(_data["ratios"])) {
                this.ratios = [] as any;
                for (let item of _data["ratios"])
                    this.ratios!.push(item);
            }
        }
    }

    static fromJS(data: any): Body3 {
        data = typeof data === 'object' ? data : {};
        let result = new Body3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investor_id"] = this.investor_id;
        data["owner"] = this.owner;
        data["portfolio_id"] = this.portfolio_id;
        data["portfolio_name"] = this.portfolio_name;
        data["version"] = this.version;
        if (Array.isArray(this.ratios)) {
            data["ratios"] = [];
            for (let item of this.ratios)
                data["ratios"].push(item);
        }
        return data; 
    }
}

export interface IBody3 {
    investor_id: string;
    owner: Body3Owner;
    /** system generated id `pft-XXXX-XXXX-XXXX-XXXX` */
    portfolio_id?: string;
    portfolio_name: string;
    version?: number;
    ratios: Ratios[];
}

export enum Product_type {
    Isa = "isa",
}

export class Body4 implements IBody4 {
    /** Unique request id to ensure idempotency. (ex: UUID) */
    request_id!: string;
    investor_id!: string;
    /** Amount as a numeral string with two decimal points. (ex: 1500.00) */
    amount!: string;
    pot_id!: string;
    payment_type!: Body4Payment_type;
    stripe?: any;
    purpose!: Body4Purpose;
    /** mandatory only if purpose:"invest" and pot does not have a portfolio template attached (e.g. An execution-only or direct-to-consumer wealth manager) */
    investment_instructions?: Investment_instructions[];

    constructor(data?: IBody4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.request_id = _data["request_id"];
            this.investor_id = _data["investor_id"];
            this.amount = _data["amount"];
            this.pot_id = _data["pot_id"];
            this.payment_type = _data["payment_type"];
            this.stripe = _data["stripe"];
            this.purpose = _data["purpose"];
            if (Array.isArray(_data["investment_instructions"])) {
                this.investment_instructions = [] as any;
                for (let item of _data["investment_instructions"])
                    this.investment_instructions!.push(item);
            }
        }
    }

    static fromJS(data: any): Body4 {
        data = typeof data === 'object' ? data : {};
        let result = new Body4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["request_id"] = this.request_id;
        data["investor_id"] = this.investor_id;
        data["amount"] = this.amount;
        data["pot_id"] = this.pot_id;
        data["payment_type"] = this.payment_type;
        data["stripe"] = this.stripe;
        data["purpose"] = this.purpose;
        if (Array.isArray(this.investment_instructions)) {
            data["investment_instructions"] = [];
            for (let item of this.investment_instructions)
                data["investment_instructions"].push(item);
        }
        return data; 
    }
}

export interface IBody4 {
    /** Unique request id to ensure idempotency. (ex: UUID) */
    request_id: string;
    investor_id: string;
    /** Amount as a numeral string with two decimal points. (ex: 1500.00) */
    amount: string;
    pot_id: string;
    payment_type: Body4Payment_type;
    stripe?: any;
    purpose: Body4Purpose;
    /** mandatory only if purpose:"invest" and pot does not have a portfolio template attached (e.g. An execution-only or direct-to-consumer wealth manager) */
    investment_instructions?: Investment_instructions[];
}

export class Body5 implements IBody5 {
    /** system generated id `pt-XXXX-XXXX-XXXX-XXXX` */
    readonly pot_id?: string;
    investor_id!: string;
    pot_name!: string;
    financial_product_id!: string;
    portfolio_id?: string;

    constructor(data?: IBody5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).pot_id = _data["pot_id"];
            this.investor_id = _data["investor_id"];
            this.pot_name = _data["pot_name"];
            this.financial_product_id = _data["financial_product_id"];
            this.portfolio_id = _data["portfolio_id"];
        }
    }

    static fromJS(data: any): Body5 {
        data = typeof data === 'object' ? data : {};
        let result = new Body5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pot_id"] = this.pot_id;
        data["investor_id"] = this.investor_id;
        data["pot_name"] = this.pot_name;
        data["financial_product_id"] = this.financial_product_id;
        data["portfolio_id"] = this.portfolio_id;
        return data; 
    }
}

export interface IBody5 {
    /** system generated id `pt-XXXX-XXXX-XXXX-XXXX` */
    pot_id?: string;
    investor_id: string;
    pot_name: string;
    financial_product_id: string;
    portfolio_id?: string;
}

export class Body6 implements IBody6 {
    /** system generated id `pt-XXXX-XXXX-XXXX-XXXX` */
    readonly pot_id?: string;
    investor_id!: string;
    pot_name!: string;
    financial_product_id!: string;
    portfolio_id?: string;

    constructor(data?: IBody6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).pot_id = _data["pot_id"];
            this.investor_id = _data["investor_id"];
            this.pot_name = _data["pot_name"];
            this.financial_product_id = _data["financial_product_id"];
            this.portfolio_id = _data["portfolio_id"];
        }
    }

    static fromJS(data: any): Body6 {
        data = typeof data === 'object' ? data : {};
        let result = new Body6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pot_id"] = this.pot_id;
        data["investor_id"] = this.investor_id;
        data["pot_name"] = this.pot_name;
        data["financial_product_id"] = this.financial_product_id;
        data["portfolio_id"] = this.portfolio_id;
        return data; 
    }
}

export interface IBody6 {
    /** system generated id `pt-XXXX-XXXX-XXXX-XXXX` */
    pot_id?: string;
    investor_id: string;
    pot_name: string;
    financial_product_id: string;
    portfolio_id?: string;
}

export enum Category_id {
    Funds = "funds",
}

export enum Category_id2 {
    Funds = "funds",
}

export class Body7 implements IBody7 {
    /** system generated id `pft-XXXX-XXXX-XXXX-XXXX` */
    readonly portfolio_id!: string;
    portfolio_name!: string;
    readonly version!: number;
    owner?: Body7Owner;
    investor_id?: string;
    ratios!: Ratios2[];

    constructor(data?: IBody7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.ratios = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).portfolio_id = _data["portfolio_id"];
            this.portfolio_name = _data["portfolio_name"];
            (<any>this).version = _data["version"];
            this.owner = _data["owner"];
            this.investor_id = _data["investor_id"];
            if (Array.isArray(_data["ratios"])) {
                this.ratios = [] as any;
                for (let item of _data["ratios"])
                    this.ratios!.push(item);
            }
        }
    }

    static fromJS(data: any): Body7 {
        data = typeof data === 'object' ? data : {};
        let result = new Body7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["portfolio_id"] = this.portfolio_id;
        data["portfolio_name"] = this.portfolio_name;
        data["version"] = this.version;
        data["owner"] = this.owner;
        data["investor_id"] = this.investor_id;
        if (Array.isArray(this.ratios)) {
            data["ratios"] = [];
            for (let item of this.ratios)
                data["ratios"].push(item);
        }
        return data; 
    }
}

export interface IBody7 {
    /** system generated id `pft-XXXX-XXXX-XXXX-XXXX` */
    portfolio_id: string;
    portfolio_name: string;
    version: number;
    owner?: Body7Owner;
    investor_id?: string;
    ratios: Ratios2[];
}

export class Body8 implements IBody8 {
    /** system generated id `pft-XXXX-XXXX-XXXX-XXXX` */
    readonly portfolio_id!: string;
    portfolio_name!: string;
    readonly version!: number;
    owner?: Body8Owner;
    investor_id?: string;
    ratios!: Ratios3[];

    constructor(data?: IBody8) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.ratios = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).portfolio_id = _data["portfolio_id"];
            this.portfolio_name = _data["portfolio_name"];
            (<any>this).version = _data["version"];
            this.owner = _data["owner"];
            this.investor_id = _data["investor_id"];
            if (Array.isArray(_data["ratios"])) {
                this.ratios = [] as any;
                for (let item of _data["ratios"])
                    this.ratios!.push(item);
            }
        }
    }

    static fromJS(data: any): Body8 {
        data = typeof data === 'object' ? data : {};
        let result = new Body8();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["portfolio_id"] = this.portfolio_id;
        data["portfolio_name"] = this.portfolio_name;
        data["version"] = this.version;
        data["owner"] = this.owner;
        data["investor_id"] = this.investor_id;
        if (Array.isArray(this.ratios)) {
            data["ratios"] = [];
            for (let item of this.ratios)
                data["ratios"].push(item);
        }
        return data; 
    }
}

export interface IBody8 {
    /** system generated id `pft-XXXX-XXXX-XXXX-XXXX` */
    portfolio_id: string;
    portfolio_name: string;
    version: number;
    owner?: Body8Owner;
    investor_id?: string;
    ratios: Ratios3[];
}

/** Definition of an buy transaction request */
export class Body9 implements IBody9 {
    /** Unique request id to ensure idempotency. (ex: UUID) */
    request_id!: string;
    pot_id!: string;
    investment_instructions!: Investment_instructions2[];

    constructor(data?: IBody9) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.investment_instructions = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.request_id = _data["request_id"];
            this.pot_id = _data["pot_id"];
            if (Array.isArray(_data["investment_instructions"])) {
                this.investment_instructions = [] as any;
                for (let item of _data["investment_instructions"])
                    this.investment_instructions!.push(Investment_instructions2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Body9 {
        data = typeof data === 'object' ? data : {};
        let result = new Body9();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["request_id"] = this.request_id;
        data["pot_id"] = this.pot_id;
        if (Array.isArray(this.investment_instructions)) {
            data["investment_instructions"] = [];
            for (let item of this.investment_instructions)
                data["investment_instructions"].push(item.toJSON());
        }
        return data; 
    }
}

/** Definition of an buy transaction request */
export interface IBody9 {
    /** Unique request id to ensure idempotency. (ex: UUID) */
    request_id: string;
    pot_id: string;
    investment_instructions: Investment_instructions2[];
}

/** Definition of an sell transaction request */
export class Body10 implements IBody10 {
    /** Unique request id to ensure idempotency. (ex: UUID) */
    request_id!: string;
    pot_id!: string;
    sell_instructions?: Sell_instructions[];

    constructor(data?: IBody10) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.request_id = _data["request_id"];
            this.pot_id = _data["pot_id"];
            if (Array.isArray(_data["sell_instructions"])) {
                this.sell_instructions = [] as any;
                for (let item of _data["sell_instructions"])
                    this.sell_instructions!.push(Sell_instructions.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Body10 {
        data = typeof data === 'object' ? data : {};
        let result = new Body10();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["request_id"] = this.request_id;
        data["pot_id"] = this.pot_id;
        if (Array.isArray(this.sell_instructions)) {
            data["sell_instructions"] = [];
            for (let item of this.sell_instructions)
                data["sell_instructions"].push(item.toJSON());
        }
        return data; 
    }
}

/** Definition of an sell transaction request */
export interface IBody10 {
    /** Unique request id to ensure idempotency. (ex: UUID) */
    request_id: string;
    pot_id: string;
    sell_instructions?: Sell_instructions[];
}

export class Anonymous implements IAnonymous {
    wosToken?: string;

    constructor(data?: IAnonymous) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.wosToken = _data["wosToken"];
        }
    }

    static fromJS(data: any): Anonymous {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["wosToken"] = this.wosToken;
        return data; 
    }
}

export interface IAnonymous {
    wosToken?: string;
}

export class Anonymous2 implements IAnonymous2 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous2 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous2 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous3 implements IAnonymous3 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous3 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous3 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous4 implements IAnonymous4 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous4 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous4 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous5 implements IAnonymous5 {
    tenant?: string;
    message?: string[];
    members?: string;

    constructor(data?: IAnonymous5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenant = _data["tenant"];
            if (Array.isArray(_data["message"])) {
                this.message = [] as any;
                for (let item of _data["message"])
                    this.message!.push(item);
            }
            this.members = _data["members"];
        }
    }

    static fromJS(data: any): Anonymous5 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenant"] = this.tenant;
        if (Array.isArray(this.message)) {
            data["message"] = [];
            for (let item of this.message)
                data["message"].push(item);
        }
        data["members"] = this.members;
        return data; 
    }
}

export interface IAnonymous5 {
    tenant?: string;
    message?: string[];
    members?: string;
}

export class Anonymous6 implements IAnonymous6 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous6 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous6 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous7 implements IAnonymous7 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous7 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous7 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous8 implements IAnonymous8 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous8) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous8 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous8();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous8 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous9 implements IAnonymous9 {
    tenant?: string;
    message?: string[];
    members?: string;

    constructor(data?: IAnonymous9) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenant = _data["tenant"];
            if (Array.isArray(_data["message"])) {
                this.message = [] as any;
                for (let item of _data["message"])
                    this.message!.push(item);
            }
            this.members = _data["members"];
        }
    }

    static fromJS(data: any): Anonymous9 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous9();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenant"] = this.tenant;
        if (Array.isArray(this.message)) {
            data["message"] = [];
            for (let item of this.message)
                data["message"].push(item);
        }
        data["members"] = this.members;
        return data; 
    }
}

export interface IAnonymous9 {
    tenant?: string;
    message?: string[];
    members?: string;
}

export class Anonymous10 implements IAnonymous10 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous10) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous10 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous10();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous10 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous11 implements IAnonymous11 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous11) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous11 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous11();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous11 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous12 implements IAnonymous12 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous12) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous12 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous12();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous12 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

/** Array of investors */
export class Anonymous13 implements IAnonymous13 {
    investors!: Investors[];

    constructor(data?: IAnonymous13) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.investors = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["investors"])) {
                this.investors = [] as any;
                for (let item of _data["investors"])
                    this.investors!.push(item);
            }
        }
    }

    static fromJS(data: any): Anonymous13 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous13();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.investors)) {
            data["investors"] = [];
            for (let item of this.investors)
                data["investors"].push(item);
        }
        return data; 
    }
}

/** Array of investors */
export interface IAnonymous13 {
    investors: Investors[];
}

export class Anonymous14 implements IAnonymous14 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous14) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous14 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous14();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous14 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous15 implements IAnonymous15 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous15) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous15 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous15();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous15 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous16 implements IAnonymous16 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous16) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous16 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous16();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous16 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous17 implements IAnonymous17 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous17) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous17 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous17();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous17 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous18 implements IAnonymous18 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous18) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous18 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous18();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous18 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

/** JSON for the Investor resource type */
export class Anonymous19 implements IAnonymous19 {
    investor_id!: string;
    title!: string;
    gender!: string;
    first_name!: string;
    last_name!: string;
    readonly status?: Status;
    email!: string;
    mobile_number!: string;
    home_number!: string;
    office_number!: string;
    nationality!: Nationality;
    national_insurance_number!: string;
    readonly kyc_aml_status?: Kyc_aml_status;
    readonly dealing_status?: Dealing_status;
    id_numbers!: Id_numbers3[];
    address!: Address3;
    mifid_tax_id!: string;
    uk_tax_resident!: boolean;
    date_of_birth!: Date_of_birth3;
    readonly kyc_aml_status_last_updated?: Date;
    readonly created_at?: Date;
    readonly deleted_at?: Date;

    constructor(data?: IAnonymous19) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.id_numbers = [];
            this.address = new Address3();
            this.date_of_birth = new Date_of_birth3();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.investor_id = _data["investor_id"];
            this.title = _data["title"];
            this.gender = _data["gender"];
            this.first_name = _data["first_name"];
            this.last_name = _data["last_name"];
            (<any>this).status = _data["status"];
            this.email = _data["email"];
            this.mobile_number = _data["mobile_number"];
            this.home_number = _data["home_number"];
            this.office_number = _data["office_number"];
            this.nationality = _data["nationality"];
            this.national_insurance_number = _data["national_insurance_number"];
            (<any>this).kyc_aml_status = _data["kyc_aml_status"];
            (<any>this).dealing_status = _data["dealing_status"];
            if (Array.isArray(_data["id_numbers"])) {
                this.id_numbers = [] as any;
                for (let item of _data["id_numbers"])
                    this.id_numbers!.push(Id_numbers3.fromJS(item));
            }
            this.address = _data["address"] ? Address3.fromJS(_data["address"]) : new Address3();
            this.mifid_tax_id = _data["mifid_tax_id"];
            this.uk_tax_resident = _data["uk_tax_resident"];
            this.date_of_birth = _data["date_of_birth"] ? Date_of_birth3.fromJS(_data["date_of_birth"]) : new Date_of_birth3();
            (<any>this).kyc_aml_status_last_updated = _data["kyc_aml_status_last_updated"] ? new Date(_data["kyc_aml_status_last_updated"].toString()) : <any>undefined;
            (<any>this).created_at = _data["created_at"] ? new Date(_data["created_at"].toString()) : <any>undefined;
            (<any>this).deleted_at = _data["deleted_at"] ? new Date(_data["deleted_at"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Anonymous19 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous19();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investor_id"] = this.investor_id;
        data["title"] = this.title;
        data["gender"] = this.gender;
        data["first_name"] = this.first_name;
        data["last_name"] = this.last_name;
        data["status"] = this.status;
        data["email"] = this.email;
        data["mobile_number"] = this.mobile_number;
        data["home_number"] = this.home_number;
        data["office_number"] = this.office_number;
        data["nationality"] = this.nationality;
        data["national_insurance_number"] = this.national_insurance_number;
        data["kyc_aml_status"] = this.kyc_aml_status;
        data["dealing_status"] = this.dealing_status;
        if (Array.isArray(this.id_numbers)) {
            data["id_numbers"] = [];
            for (let item of this.id_numbers)
                data["id_numbers"].push(item.toJSON());
        }
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["mifid_tax_id"] = this.mifid_tax_id;
        data["uk_tax_resident"] = this.uk_tax_resident;
        data["date_of_birth"] = this.date_of_birth ? this.date_of_birth.toJSON() : <any>undefined;
        data["kyc_aml_status_last_updated"] = this.kyc_aml_status_last_updated ? this.kyc_aml_status_last_updated.toISOString() : <any>undefined;
        data["created_at"] = this.created_at ? this.created_at.toISOString() : <any>undefined;
        data["deleted_at"] = this.deleted_at ? this.deleted_at.toISOString() : <any>undefined;
        return data; 
    }
}

/** JSON for the Investor resource type */
export interface IAnonymous19 {
    investor_id: string;
    title: string;
    gender: string;
    first_name: string;
    last_name: string;
    status?: Status;
    email: string;
    mobile_number: string;
    home_number: string;
    office_number: string;
    nationality: Nationality;
    national_insurance_number: string;
    kyc_aml_status?: Kyc_aml_status;
    dealing_status?: Dealing_status;
    id_numbers: Id_numbers3[];
    address: Address3;
    mifid_tax_id: string;
    uk_tax_resident: boolean;
    date_of_birth: Date_of_birth3;
    kyc_aml_status_last_updated?: Date;
    created_at?: Date;
    deleted_at?: Date;
}

export class Anonymous20 implements IAnonymous20 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous20) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous20 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous20();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous20 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous21 implements IAnonymous21 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous21) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous21 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous21();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous21 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous22 implements IAnonymous22 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous22) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous22 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous22();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous22 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous23 implements IAnonymous23 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous23) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous23 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous23();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous23 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous24 implements IAnonymous24 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous24) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous24 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous24();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous24 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

/** JSON for the Investor resource type */
export class Anonymous25 implements IAnonymous25 {
    investor_id!: string;
    title!: string;
    gender!: string;
    first_name!: string;
    last_name!: string;
    readonly status?: Status2;
    email!: string;
    mobile_number!: string;
    home_number!: string;
    office_number!: string;
    nationality!: Nationality2;
    national_insurance_number!: string;
    readonly kyc_aml_status?: Kyc_aml_status2;
    readonly dealing_status?: Dealing_status2;
    id_numbers!: Id_numbers4[];
    address!: Address4;
    mifid_tax_id!: string;
    uk_tax_resident!: boolean;
    date_of_birth!: Date_of_birth4;
    readonly kyc_aml_status_last_updated?: Date;
    readonly created_at?: Date;
    readonly deleted_at?: Date;

    constructor(data?: IAnonymous25) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.id_numbers = [];
            this.address = new Address4();
            this.date_of_birth = new Date_of_birth4();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.investor_id = _data["investor_id"];
            this.title = _data["title"];
            this.gender = _data["gender"];
            this.first_name = _data["first_name"];
            this.last_name = _data["last_name"];
            (<any>this).status = _data["status"];
            this.email = _data["email"];
            this.mobile_number = _data["mobile_number"];
            this.home_number = _data["home_number"];
            this.office_number = _data["office_number"];
            this.nationality = _data["nationality"];
            this.national_insurance_number = _data["national_insurance_number"];
            (<any>this).kyc_aml_status = _data["kyc_aml_status"];
            (<any>this).dealing_status = _data["dealing_status"];
            if (Array.isArray(_data["id_numbers"])) {
                this.id_numbers = [] as any;
                for (let item of _data["id_numbers"])
                    this.id_numbers!.push(Id_numbers4.fromJS(item));
            }
            this.address = _data["address"] ? Address4.fromJS(_data["address"]) : new Address4();
            this.mifid_tax_id = _data["mifid_tax_id"];
            this.uk_tax_resident = _data["uk_tax_resident"];
            this.date_of_birth = _data["date_of_birth"] ? Date_of_birth4.fromJS(_data["date_of_birth"]) : new Date_of_birth4();
            (<any>this).kyc_aml_status_last_updated = _data["kyc_aml_status_last_updated"] ? new Date(_data["kyc_aml_status_last_updated"].toString()) : <any>undefined;
            (<any>this).created_at = _data["created_at"] ? new Date(_data["created_at"].toString()) : <any>undefined;
            (<any>this).deleted_at = _data["deleted_at"] ? new Date(_data["deleted_at"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Anonymous25 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous25();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investor_id"] = this.investor_id;
        data["title"] = this.title;
        data["gender"] = this.gender;
        data["first_name"] = this.first_name;
        data["last_name"] = this.last_name;
        data["status"] = this.status;
        data["email"] = this.email;
        data["mobile_number"] = this.mobile_number;
        data["home_number"] = this.home_number;
        data["office_number"] = this.office_number;
        data["nationality"] = this.nationality;
        data["national_insurance_number"] = this.national_insurance_number;
        data["kyc_aml_status"] = this.kyc_aml_status;
        data["dealing_status"] = this.dealing_status;
        if (Array.isArray(this.id_numbers)) {
            data["id_numbers"] = [];
            for (let item of this.id_numbers)
                data["id_numbers"].push(item.toJSON());
        }
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["mifid_tax_id"] = this.mifid_tax_id;
        data["uk_tax_resident"] = this.uk_tax_resident;
        data["date_of_birth"] = this.date_of_birth ? this.date_of_birth.toJSON() : <any>undefined;
        data["kyc_aml_status_last_updated"] = this.kyc_aml_status_last_updated ? this.kyc_aml_status_last_updated.toISOString() : <any>undefined;
        data["created_at"] = this.created_at ? this.created_at.toISOString() : <any>undefined;
        data["deleted_at"] = this.deleted_at ? this.deleted_at.toISOString() : <any>undefined;
        return data; 
    }
}

/** JSON for the Investor resource type */
export interface IAnonymous25 {
    investor_id: string;
    title: string;
    gender: string;
    first_name: string;
    last_name: string;
    status?: Status2;
    email: string;
    mobile_number: string;
    home_number: string;
    office_number: string;
    nationality: Nationality2;
    national_insurance_number: string;
    kyc_aml_status?: Kyc_aml_status2;
    dealing_status?: Dealing_status2;
    id_numbers: Id_numbers4[];
    address: Address4;
    mifid_tax_id: string;
    uk_tax_resident: boolean;
    date_of_birth: Date_of_birth4;
    kyc_aml_status_last_updated?: Date;
    created_at?: Date;
    deleted_at?: Date;
}

export class Anonymous26 implements IAnonymous26 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous26) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous26 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous26();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous26 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous27 implements IAnonymous27 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous27) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous27 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous27();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous27 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous28 implements IAnonymous28 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous28) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous28 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous28();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous28 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous29 implements IAnonymous29 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous29) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous29 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous29();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous29 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous30 implements IAnonymous30 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous30) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous30 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous30();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous30 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous31 implements IAnonymous31 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous31) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous31 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous31();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous31 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous32 implements IAnonymous32 {
    readonly investor_id?: string;
    /** system generated id `pt-XXXX-XXXX-XXXX-XXXX` */
    readonly pot_id?: string;
    pot_name!: string;
    financial_product_id!: string;
    portfolio_id?: string;

    constructor(data?: IAnonymous32) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).investor_id = _data["investor_id"];
            (<any>this).pot_id = _data["pot_id"];
            this.pot_name = _data["pot_name"];
            this.financial_product_id = _data["financial_product_id"];
            this.portfolio_id = _data["portfolio_id"];
        }
    }

    static fromJS(data: any): Anonymous32 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investor_id"] = this.investor_id;
        data["pot_id"] = this.pot_id;
        data["pot_name"] = this.pot_name;
        data["financial_product_id"] = this.financial_product_id;
        data["portfolio_id"] = this.portfolio_id;
        return data; 
    }
}

export interface IAnonymous32 {
    investor_id?: string;
    /** system generated id `pt-XXXX-XXXX-XXXX-XXXX` */
    pot_id?: string;
    pot_name: string;
    financial_product_id: string;
    portfolio_id?: string;
}

export class Anonymous33 implements IAnonymous33 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous33) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous33 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous33();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous33 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous34 implements IAnonymous34 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous34) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous34 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous34();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous34 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous35 implements IAnonymous35 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous35) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous35 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous35();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous35 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous36 implements IAnonymous36 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous36) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous36 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous36();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous36 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous37 implements IAnonymous37 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous37) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous37 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous37();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous37 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

/** Array of all active investment pots created by the investor */
export class Anonymous38 implements IAnonymous38 {
    pots!: Pots[];

    constructor(data?: IAnonymous38) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.pots = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["pots"])) {
                this.pots = [] as any;
                for (let item of _data["pots"])
                    this.pots!.push(item);
            }
        }
    }

    static fromJS(data: any): Anonymous38 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous38();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.pots)) {
            data["pots"] = [];
            for (let item of this.pots)
                data["pots"].push(item);
        }
        return data; 
    }
}

/** Array of all active investment pots created by the investor */
export interface IAnonymous38 {
    pots: Pots[];
}

export class Anonymous39 implements IAnonymous39 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous39) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous39 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous39();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous39 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous40 implements IAnonymous40 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous40) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous40 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous40();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous40 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous41 implements IAnonymous41 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous41) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous41 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous41();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous41 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous42 implements IAnonymous42 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous42) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous42 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous42();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous42 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous43 implements IAnonymous43 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous43) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous43 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous43();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous43 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous44 implements IAnonymous44 {
    readonly investor_id!: string;
    readonly owner!: Owner;
    /** system generated id `pft-XXXX-XXXX-XXXX-XXXX` */
    readonly portfolio_id?: string;
    portfolio_name!: string;
    readonly version?: number;
    ratios!: Ratios4[];

    constructor(data?: IAnonymous44) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.ratios = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).investor_id = _data["investor_id"];
            (<any>this).owner = _data["owner"];
            (<any>this).portfolio_id = _data["portfolio_id"];
            this.portfolio_name = _data["portfolio_name"];
            (<any>this).version = _data["version"];
            if (Array.isArray(_data["ratios"])) {
                this.ratios = [] as any;
                for (let item of _data["ratios"])
                    this.ratios!.push(item);
            }
        }
    }

    static fromJS(data: any): Anonymous44 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous44();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investor_id"] = this.investor_id;
        data["owner"] = this.owner;
        data["portfolio_id"] = this.portfolio_id;
        data["portfolio_name"] = this.portfolio_name;
        data["version"] = this.version;
        if (Array.isArray(this.ratios)) {
            data["ratios"] = [];
            for (let item of this.ratios)
                data["ratios"].push(item);
        }
        return data; 
    }
}

export interface IAnonymous44 {
    investor_id: string;
    owner: Owner;
    /** system generated id `pft-XXXX-XXXX-XXXX-XXXX` */
    portfolio_id?: string;
    portfolio_name: string;
    version?: number;
    ratios: Ratios4[];
}

export class Anonymous45 implements IAnonymous45 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous45) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous45 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous45();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous45 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous46 implements IAnonymous46 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous46) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous46 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous46();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous46 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous47 implements IAnonymous47 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous47) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous47 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous47();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous47 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous48 implements IAnonymous48 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous48) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous48 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous48();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous48 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous49 implements IAnonymous49 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous49) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous49 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous49();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous49 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

/** Array of all portfolio templates applicable to the investor */
export class Anonymous50 implements IAnonymous50 {
    portfolio_templates!: Portfolio_templates[];

    constructor(data?: IAnonymous50) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.portfolio_templates = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["portfolio_templates"])) {
                this.portfolio_templates = [] as any;
                for (let item of _data["portfolio_templates"])
                    this.portfolio_templates!.push(item);
            }
        }
    }

    static fromJS(data: any): Anonymous50 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous50();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.portfolio_templates)) {
            data["portfolio_templates"] = [];
            for (let item of this.portfolio_templates)
                data["portfolio_templates"].push(item);
        }
        return data; 
    }
}

/** Array of all portfolio templates applicable to the investor */
export interface IAnonymous50 {
    portfolio_templates: Portfolio_templates[];
}

export class Anonymous51 implements IAnonymous51 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous51) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous51 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous51();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous51 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous52 implements IAnonymous52 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous52) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous52 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous52();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous52 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous53 implements IAnonymous53 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous53) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous53 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous53();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous53 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous54 implements IAnonymous54 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous54) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous54 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous54();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous54 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous55 implements IAnonymous55 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous55) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous55 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous55();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous55 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

/** Remaining investable amount as a string with precision of two decimal points */
export class Anonymous56 implements IAnonymous56 {
    readonly amount!: string;
    readonly annual_limit!: string;
    readonly minimum_allowed_cash_limit!: string;

    constructor(data?: IAnonymous56) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).amount = _data["amount"];
            (<any>this).annual_limit = _data["annual_limit"];
            (<any>this).minimum_allowed_cash_limit = _data["minimum_allowed_cash_limit"];
        }
    }

    static fromJS(data: any): Anonymous56 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous56();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["annual_limit"] = this.annual_limit;
        data["minimum_allowed_cash_limit"] = this.minimum_allowed_cash_limit;
        return data; 
    }
}

/** Remaining investable amount as a string with precision of two decimal points */
export interface IAnonymous56 {
    amount: string;
    annual_limit: string;
    minimum_allowed_cash_limit: string;
}

export class Anonymous57 implements IAnonymous57 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous57) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous57 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous57();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous57 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous58 implements IAnonymous58 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous58) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous58 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous58();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous58 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous59 implements IAnonymous59 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous59) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous59 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous59();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous59 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous60 implements IAnonymous60 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous60) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous60 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous60();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous60 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous61 implements IAnonymous61 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous61) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous61 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous61();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous61 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous62 implements IAnonymous62 {
    investor_id!: string;
    /** The kyc_check_status returns whether the request to re-check KYC/AML was successful or not. */
    kyc_check_status!: Kyc_check_status;

    constructor(data?: IAnonymous62) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.investor_id = _data["investor_id"];
            this.kyc_check_status = _data["kyc_check_status"];
        }
    }

    static fromJS(data: any): Anonymous62 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous62();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investor_id"] = this.investor_id;
        data["kyc_check_status"] = this.kyc_check_status;
        return data; 
    }
}

export interface IAnonymous62 {
    investor_id: string;
    /** The kyc_check_status returns whether the request to re-check KYC/AML was successful or not. */
    kyc_check_status: Kyc_check_status;
}

export class Anonymous63 implements IAnonymous63 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous63) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous63 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous63();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous63 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous64 implements IAnonymous64 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous64) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous64 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous64();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous64 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous65 implements IAnonymous65 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous65) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous65 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous65();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous65 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous66 implements IAnonymous66 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous66) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous66 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous66();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous66 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous67 implements IAnonymous67 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous67) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous67 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous67();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous67 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous68 implements IAnonymous68 {
    financial_products!: Financial_products[];

    constructor(data?: IAnonymous68) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.financial_products = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["financial_products"])) {
                this.financial_products = [] as any;
                for (let item of _data["financial_products"])
                    this.financial_products!.push(Financial_products.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous68 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous68();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.financial_products)) {
            data["financial_products"] = [];
            for (let item of this.financial_products)
                data["financial_products"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAnonymous68 {
    financial_products: Financial_products[];
}

export class Anonymous69 implements IAnonymous69 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous69) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous69 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous69();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous69 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous70 implements IAnonymous70 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous70) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous70 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous70();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous70 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous71 implements IAnonymous71 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous71) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous71 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous71();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous71 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous72 implements IAnonymous72 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous72) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous72 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous72();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous72 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous73 implements IAnonymous73 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous73) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous73 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous73();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous73 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous74 implements IAnonymous74 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous74) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous74 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous74();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous74 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous75 implements IAnonymous75 {
    payments!: Payments[];

    constructor(data?: IAnonymous75) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.payments = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["payments"])) {
                this.payments = [] as any;
                for (let item of _data["payments"])
                    this.payments!.push(item);
            }
        }
    }

    static fromJS(data: any): Anonymous75 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous75();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.payments)) {
            data["payments"] = [];
            for (let item of this.payments)
                data["payments"].push(item);
        }
        return data; 
    }
}

export interface IAnonymous75 {
    payments: Payments[];
}

export class Anonymous76 implements IAnonymous76 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous76) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous76 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous76();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous76 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous77 implements IAnonymous77 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous77) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous77 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous77();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous77 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous78 implements IAnonymous78 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous78) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous78 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous78();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous78 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous79 implements IAnonymous79 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous79) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous79 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous79();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous79 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous80 implements IAnonymous80 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous80) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous80 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous80();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous80 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous81 implements IAnonymous81 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous81) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous81 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous81();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous81 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous82 implements IAnonymous82 {
    amount!: string;
    currency!: string;
    investor_id!: string;
    pot_id!: string;
    payment_type!: Payment_type;
    stripe!: Stripe;
    client_token!: string;
    purpose?: Purpose;
    /** mandatory only if purpose:"invest" and pot does not have a portfolio template attached (e.g. An execution-only or direct-to-consumer wealth manager) */
    investment_instructions?: Investment_instructions3[];

    constructor(data?: IAnonymous82) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.stripe = new Stripe();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.amount = _data["amount"];
            this.currency = _data["currency"];
            this.investor_id = _data["investor_id"];
            this.pot_id = _data["pot_id"];
            this.payment_type = _data["payment_type"];
            this.stripe = _data["stripe"] ? Stripe.fromJS(_data["stripe"]) : new Stripe();
            this.client_token = _data["client_token"];
            this.purpose = _data["purpose"];
            if (Array.isArray(_data["investment_instructions"])) {
                this.investment_instructions = [] as any;
                for (let item of _data["investment_instructions"])
                    this.investment_instructions!.push(item);
            }
        }
    }

    static fromJS(data: any): Anonymous82 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous82();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["currency"] = this.currency;
        data["investor_id"] = this.investor_id;
        data["pot_id"] = this.pot_id;
        data["payment_type"] = this.payment_type;
        data["stripe"] = this.stripe ? this.stripe.toJSON() : <any>undefined;
        data["client_token"] = this.client_token;
        data["purpose"] = this.purpose;
        if (Array.isArray(this.investment_instructions)) {
            data["investment_instructions"] = [];
            for (let item of this.investment_instructions)
                data["investment_instructions"].push(item);
        }
        return data; 
    }
}

export interface IAnonymous82 {
    amount: string;
    currency: string;
    investor_id: string;
    pot_id: string;
    payment_type: Payment_type;
    stripe: Stripe;
    client_token: string;
    purpose?: Purpose;
    /** mandatory only if purpose:"invest" and pot does not have a portfolio template attached (e.g. An execution-only or direct-to-consumer wealth manager) */
    investment_instructions?: Investment_instructions3[];
}

export class Anonymous83 implements IAnonymous83 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous83) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous83 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous83();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous83 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous84 implements IAnonymous84 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous84) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous84 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous84();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous84 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous85 implements IAnonymous85 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous85) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous85 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous85();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous85 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous86 implements IAnonymous86 {
    /** Human readable description of the error */
    message!: string;
    /** Current status of the original request */
    status!: Status3;
    /** Stringified original response body if status is `COMPLETE` */
    response?: any;

    constructor(data?: IAnonymous86) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.status = _data["status"];
            this.response = _data["response"];
        }
    }

    static fromJS(data: any): Anonymous86 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous86();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["status"] = this.status;
        data["response"] = this.response;
        return data; 
    }
}

export interface IAnonymous86 {
    /** Human readable description of the error */
    message: string;
    /** Current status of the original request */
    status: Status3;
    /** Stringified original response body if status is `COMPLETE` */
    response?: any;
}

export class Anonymous87 implements IAnonymous87 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous87) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous87 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous87();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous87 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous88 implements IAnonymous88 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous88) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous88 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous88();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous88 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous89 implements IAnonymous89 {
    /** system generated id `pt-XXXX-XXXX-XXXX-XXXX` */
    readonly pot_id?: string;
    investor_id!: string;
    pot_name!: string;
    financial_product_id!: string;
    portfolio_id?: string;

    constructor(data?: IAnonymous89) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).pot_id = _data["pot_id"];
            this.investor_id = _data["investor_id"];
            this.pot_name = _data["pot_name"];
            this.financial_product_id = _data["financial_product_id"];
            this.portfolio_id = _data["portfolio_id"];
        }
    }

    static fromJS(data: any): Anonymous89 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous89();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pot_id"] = this.pot_id;
        data["investor_id"] = this.investor_id;
        data["pot_name"] = this.pot_name;
        data["financial_product_id"] = this.financial_product_id;
        data["portfolio_id"] = this.portfolio_id;
        return data; 
    }
}

export interface IAnonymous89 {
    /** system generated id `pt-XXXX-XXXX-XXXX-XXXX` */
    pot_id?: string;
    investor_id: string;
    pot_name: string;
    financial_product_id: string;
    portfolio_id?: string;
}

export class Anonymous90 implements IAnonymous90 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous90) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous90 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous90();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous90 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous91 implements IAnonymous91 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous91) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous91 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous91();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous91 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous92 implements IAnonymous92 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous92) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous92 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous92();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous92 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous93 implements IAnonymous93 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous93) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous93 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous93();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous93 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous94 implements IAnonymous94 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous94) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous94 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous94();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous94 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous95 implements IAnonymous95 {
    /** system generated id `pt-XXXX-XXXX-XXXX-XXXX` */
    readonly pot_id?: string;
    investor_id!: string;
    pot_name!: string;
    financial_product_id!: string;
    portfolio_id?: string;

    constructor(data?: IAnonymous95) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).pot_id = _data["pot_id"];
            this.investor_id = _data["investor_id"];
            this.pot_name = _data["pot_name"];
            this.financial_product_id = _data["financial_product_id"];
            this.portfolio_id = _data["portfolio_id"];
        }
    }

    static fromJS(data: any): Anonymous95 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous95();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pot_id"] = this.pot_id;
        data["investor_id"] = this.investor_id;
        data["pot_name"] = this.pot_name;
        data["financial_product_id"] = this.financial_product_id;
        data["portfolio_id"] = this.portfolio_id;
        return data; 
    }
}

export interface IAnonymous95 {
    /** system generated id `pt-XXXX-XXXX-XXXX-XXXX` */
    pot_id?: string;
    investor_id: string;
    pot_name: string;
    financial_product_id: string;
    portfolio_id?: string;
}

export class Anonymous96 implements IAnonymous96 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous96) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous96 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous96();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous96 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous97 implements IAnonymous97 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous97) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous97 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous97();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous97 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous98 implements IAnonymous98 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous98) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous98 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous98();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous98 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous99 implements IAnonymous99 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous99) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous99 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous99();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous99 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous100 implements IAnonymous100 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous100) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous100 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous100();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous100 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous101 implements IAnonymous101 {
    /** system generated id `pt-XXXX-XXXX-XXXX-XXXX` */
    readonly pot_id!: string;
    readonly value!: number;
    /** Current total return */
    readonly total_returns?: number;
    /** Current annualized return as an percentage */
    readonly annualised_returns?: number;

    constructor(data?: IAnonymous101) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).pot_id = _data["pot_id"];
            (<any>this).value = _data["value"];
            (<any>this).total_returns = _data["total_returns"];
            (<any>this).annualised_returns = _data["annualised_returns"];
        }
    }

    static fromJS(data: any): Anonymous101 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous101();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pot_id"] = this.pot_id;
        data["value"] = this.value;
        data["total_returns"] = this.total_returns;
        data["annualised_returns"] = this.annualised_returns;
        return data; 
    }
}

export interface IAnonymous101 {
    /** system generated id `pt-XXXX-XXXX-XXXX-XXXX` */
    pot_id: string;
    value: number;
    /** Current total return */
    total_returns?: number;
    /** Current annualized return as an percentage */
    annualised_returns?: number;
}

export class Anonymous102 implements IAnonymous102 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous102) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous102 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous102();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous102 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous103 implements IAnonymous103 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous103) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous103 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous103();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous103 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous104 implements IAnonymous104 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous104) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous104 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous104();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous104 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous105 implements IAnonymous105 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous105) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous105 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous105();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous105 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous106 implements IAnonymous106 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous106) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous106 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous106();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous106 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous107 implements IAnonymous107 {
    readonly pot_id!: string;
    readonly holdings!: Holdings[];

    constructor(data?: IAnonymous107) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.holdings = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).pot_id = _data["pot_id"];
            if (Array.isArray(_data["holdings"])) {
                (<any>this).holdings = [] as any;
                for (let item of _data["holdings"])
                    (<any>this).holdings!.push(item);
            }
        }
    }

    static fromJS(data: any): Anonymous107 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous107();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pot_id"] = this.pot_id;
        if (Array.isArray(this.holdings)) {
            data["holdings"] = [];
            for (let item of this.holdings)
                data["holdings"].push(item);
        }
        return data; 
    }
}

export interface IAnonymous107 {
    pot_id: string;
    holdings: Holdings[];
}

export class Anonymous108 implements IAnonymous108 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous108) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous108 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous108();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous108 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous109 implements IAnonymous109 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous109) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous109 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous109();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous109 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous110 implements IAnonymous110 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous110) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous110 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous110();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous110 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous111 implements IAnonymous111 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous111) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous111 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous111();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous111 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous112 implements IAnonymous112 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous112) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous112 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous112();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous112 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous113 implements IAnonymous113 {
    /** system generated id `pt-XXXX-XXXX-XXXX-XXXX` */
    readonly pot_id?: string;
    investor_id!: string;
    pot_name!: string;
    financial_product_id!: string;
    portfolio_id?: string;

    constructor(data?: IAnonymous113) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).pot_id = _data["pot_id"];
            this.investor_id = _data["investor_id"];
            this.pot_name = _data["pot_name"];
            this.financial_product_id = _data["financial_product_id"];
            this.portfolio_id = _data["portfolio_id"];
        }
    }

    static fromJS(data: any): Anonymous113 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous113();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pot_id"] = this.pot_id;
        data["investor_id"] = this.investor_id;
        data["pot_name"] = this.pot_name;
        data["financial_product_id"] = this.financial_product_id;
        data["portfolio_id"] = this.portfolio_id;
        return data; 
    }
}

export interface IAnonymous113 {
    /** system generated id `pt-XXXX-XXXX-XXXX-XXXX` */
    pot_id?: string;
    investor_id: string;
    pot_name: string;
    financial_product_id: string;
    portfolio_id?: string;
}

export class Anonymous114 implements IAnonymous114 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous114) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous114 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous114();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous114 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous115 implements IAnonymous115 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous115) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous115 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous115();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous115 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous116 implements IAnonymous116 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous116) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous116 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous116();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous116 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous117 implements IAnonymous117 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous117) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous117 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous117();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous117 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous118 implements IAnonymous118 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous118) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous118 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous118();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous118 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous119 implements IAnonymous119 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous119) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous119 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous119();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous119 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous120 implements IAnonymous120 {
    pot_id!: Pot_id;
    readonly value!: number;
    /** Current total return */
    readonly total_returns?: number;
    /** Current annualized return as an percentage */
    readonly annualised_returns?: number;

    constructor(data?: IAnonymous120) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pot_id = _data["pot_id"];
            (<any>this).value = _data["value"];
            (<any>this).total_returns = _data["total_returns"];
            (<any>this).annualised_returns = _data["annualised_returns"];
        }
    }

    static fromJS(data: any): Anonymous120 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous120();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pot_id"] = this.pot_id;
        data["value"] = this.value;
        data["total_returns"] = this.total_returns;
        data["annualised_returns"] = this.annualised_returns;
        return data; 
    }
}

export interface IAnonymous120 {
    pot_id: Pot_id;
    value: number;
    /** Current total return */
    total_returns?: number;
    /** Current annualized return as an percentage */
    annualised_returns?: number;
}

export class Anonymous121 implements IAnonymous121 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous121) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous121 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous121();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous121 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous122 implements IAnonymous122 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous122) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous122 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous122();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous122 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous123 implements IAnonymous123 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous123) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous123 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous123();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous123 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous124 implements IAnonymous124 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous124) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous124 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous124();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous124 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous125 implements IAnonymous125 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous125) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous125 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous125();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous125 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous126 implements IAnonymous126 {
    pot_id!: Pot_id2;
    readonly holdings!: Holdings2[];

    constructor(data?: IAnonymous126) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.holdings = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pot_id = _data["pot_id"];
            if (Array.isArray(_data["holdings"])) {
                (<any>this).holdings = [] as any;
                for (let item of _data["holdings"])
                    (<any>this).holdings!.push(item);
            }
        }
    }

    static fromJS(data: any): Anonymous126 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous126();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pot_id"] = this.pot_id;
        if (Array.isArray(this.holdings)) {
            data["holdings"] = [];
            for (let item of this.holdings)
                data["holdings"].push(item);
        }
        return data; 
    }
}

export interface IAnonymous126 {
    pot_id: Pot_id2;
    holdings: Holdings2[];
}

export class Anonymous127 implements IAnonymous127 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous127) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous127 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous127();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous127 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous128 implements IAnonymous128 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous128) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous128 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous128();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous128 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous129 implements IAnonymous129 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous129) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous129 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous129();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous129 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous130 implements IAnonymous130 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous130) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous130 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous130();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous130 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous131 implements IAnonymous131 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous131) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous131 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous131();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous131 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous132 implements IAnonymous132 {
    investment_products!: Investment_products[];

    constructor(data?: IAnonymous132) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.investment_products = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["investment_products"])) {
                this.investment_products = [] as any;
                for (let item of _data["investment_products"])
                    this.investment_products!.push(item);
            }
        }
    }

    static fromJS(data: any): Anonymous132 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous132();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.investment_products)) {
            data["investment_products"] = [];
            for (let item of this.investment_products)
                data["investment_products"].push(item);
        }
        return data; 
    }
}

export interface IAnonymous132 {
    investment_products: Investment_products[];
}

export class Anonymous133 implements IAnonymous133 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous133) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous133 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous133();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous133 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous134 implements IAnonymous134 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous134) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous134 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous134();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous134 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous135 implements IAnonymous135 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous135) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous135 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous135();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous135 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous136 implements IAnonymous136 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous136) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous136 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous136();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous136 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous137 implements IAnonymous137 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous137) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous137 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous137();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous137 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous138 implements IAnonymous138 {
    investment_product_unit_prices?: Investment_product_unit_prices[];

    constructor(data?: IAnonymous138) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["investment_product_unit_prices"])) {
                this.investment_product_unit_prices = [] as any;
                for (let item of _data["investment_product_unit_prices"])
                    this.investment_product_unit_prices!.push(item);
            }
        }
    }

    static fromJS(data: any): Anonymous138 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous138();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.investment_product_unit_prices)) {
            data["investment_product_unit_prices"] = [];
            for (let item of this.investment_product_unit_prices)
                data["investment_product_unit_prices"].push(item);
        }
        return data; 
    }
}

export interface IAnonymous138 {
    investment_product_unit_prices?: Investment_product_unit_prices[];
}

export class Anonymous139 implements IAnonymous139 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous139) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous139 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous139();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous139 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous140 implements IAnonymous140 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous140) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous140 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous140();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous140 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous141 implements IAnonymous141 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous141) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous141 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous141();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous141 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous142 implements IAnonymous142 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous142) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous142 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous142();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous142 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous143 implements IAnonymous143 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous143) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous143 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous143();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous143 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous144 implements IAnonymous144 {
    readonly investment_product_id?: string;
    readonly iSIN?: string;
    readonly name?: string;
    readonly asset_type?: Asset_type;
    readonly asset_sub_type?: string;
    readonly currency?: string;
    readonly pricing_method?: string;
    readonly fund_asset_type?: string;
    readonly fund_code?: string;
    readonly applicable_financial_products?: Applicable_financial_products;

    constructor(data?: IAnonymous144) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).investment_product_id = _data["investment_product_id"];
            (<any>this).iSIN = _data["ISIN"];
            (<any>this).name = _data["name"];
            (<any>this).asset_type = _data["asset_type"];
            (<any>this).asset_sub_type = _data["asset_sub_type"];
            (<any>this).currency = _data["currency"];
            (<any>this).pricing_method = _data["pricing_method"];
            (<any>this).fund_asset_type = _data["fund_asset_type"];
            (<any>this).fund_code = _data["fund_code"];
            if (Array.isArray(_data["applicable_financial_products"])) {
                (<any>this).applicable_financial_products = [] as any;
                for (let item of _data["applicable_financial_products"])
                    (<any>this).applicable_financial_products!.push(item);
            }
        }
    }

    static fromJS(data: any): Anonymous144 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous144();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investment_product_id"] = this.investment_product_id;
        data["ISIN"] = this.iSIN;
        data["name"] = this.name;
        data["asset_type"] = this.asset_type;
        data["asset_sub_type"] = this.asset_sub_type;
        data["currency"] = this.currency;
        data["pricing_method"] = this.pricing_method;
        data["fund_asset_type"] = this.fund_asset_type;
        data["fund_code"] = this.fund_code;
        if (Array.isArray(this.applicable_financial_products)) {
            data["applicable_financial_products"] = [];
            for (let item of this.applicable_financial_products)
                data["applicable_financial_products"].push(item);
        }
        return data; 
    }
}

export interface IAnonymous144 {
    investment_product_id?: string;
    iSIN?: string;
    name?: string;
    asset_type?: Asset_type;
    asset_sub_type?: string;
    currency?: string;
    pricing_method?: string;
    fund_asset_type?: string;
    fund_code?: string;
    applicable_financial_products?: Applicable_financial_products;
}

export class Anonymous145 implements IAnonymous145 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous145) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous145 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous145();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous145 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous146 implements IAnonymous146 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous146) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous146 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous146();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous146 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous147 implements IAnonymous147 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous147) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous147 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous147();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous147 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous148 implements IAnonymous148 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous148) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous148 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous148();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous148 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous149 implements IAnonymous149 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous149) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous149 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous149();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous149 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous150 implements IAnonymous150 {
    readonly investment_product_id?: string;
    /** Numeral string with two decimal point precision */
    readonly current_price?: string;
    /** Currency of the current price */
    readonly currency?: string;
    readonly price_on_date?: Date;

    constructor(data?: IAnonymous150) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).investment_product_id = _data["investment_product_id"];
            (<any>this).current_price = _data["current_price"];
            (<any>this).currency = _data["currency"];
            (<any>this).price_on_date = _data["price_on_date"] ? new Date(_data["price_on_date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Anonymous150 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous150();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investment_product_id"] = this.investment_product_id;
        data["current_price"] = this.current_price;
        data["currency"] = this.currency;
        data["price_on_date"] = this.price_on_date ? formatDate(this.price_on_date) : <any>undefined;
        return data; 
    }
}

export interface IAnonymous150 {
    investment_product_id?: string;
    /** Numeral string with two decimal point precision */
    current_price?: string;
    /** Currency of the current price */
    currency?: string;
    price_on_date?: Date;
}

export class Anonymous151 implements IAnonymous151 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous151) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous151 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous151();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous151 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous152 implements IAnonymous152 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous152) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous152 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous152();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous152 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous153 implements IAnonymous153 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous153) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous153 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous153();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous153 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous154 implements IAnonymous154 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous154) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous154 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous154();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous154 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous155 implements IAnonymous155 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous155) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous155 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous155();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous155 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

/** Array of all portfolio templates applicable to the investor */
export class Anonymous156 implements IAnonymous156 {
    portfolio_templates!: Portfolio_templates2[];

    constructor(data?: IAnonymous156) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.portfolio_templates = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["portfolio_templates"])) {
                this.portfolio_templates = [] as any;
                for (let item of _data["portfolio_templates"])
                    this.portfolio_templates!.push(item);
            }
        }
    }

    static fromJS(data: any): Anonymous156 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous156();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.portfolio_templates)) {
            data["portfolio_templates"] = [];
            for (let item of this.portfolio_templates)
                data["portfolio_templates"].push(item);
        }
        return data; 
    }
}

/** Array of all portfolio templates applicable to the investor */
export interface IAnonymous156 {
    portfolio_templates: Portfolio_templates2[];
}

export class Anonymous157 implements IAnonymous157 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous157) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous157 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous157();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous157 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous158 implements IAnonymous158 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous158) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous158 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous158();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous158 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous159 implements IAnonymous159 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous159) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous159 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous159();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous159 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous160 implements IAnonymous160 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous160) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous160 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous160();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous160 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous161 implements IAnonymous161 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous161) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous161 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous161();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous161 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous162 implements IAnonymous162 {
    /** system generated id `pft-XXXX-XXXX-XXXX-XXXX` */
    readonly portfolio_id!: string;
    portfolio_name!: string;
    readonly version!: number;
    owner?: Owner2;
    investor_id?: string;
    ratios!: Ratios5[];

    constructor(data?: IAnonymous162) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.ratios = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).portfolio_id = _data["portfolio_id"];
            this.portfolio_name = _data["portfolio_name"];
            (<any>this).version = _data["version"];
            this.owner = _data["owner"];
            this.investor_id = _data["investor_id"];
            if (Array.isArray(_data["ratios"])) {
                this.ratios = [] as any;
                for (let item of _data["ratios"])
                    this.ratios!.push(item);
            }
        }
    }

    static fromJS(data: any): Anonymous162 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous162();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["portfolio_id"] = this.portfolio_id;
        data["portfolio_name"] = this.portfolio_name;
        data["version"] = this.version;
        data["owner"] = this.owner;
        data["investor_id"] = this.investor_id;
        if (Array.isArray(this.ratios)) {
            data["ratios"] = [];
            for (let item of this.ratios)
                data["ratios"].push(item);
        }
        return data; 
    }
}

export interface IAnonymous162 {
    /** system generated id `pft-XXXX-XXXX-XXXX-XXXX` */
    portfolio_id: string;
    portfolio_name: string;
    version: number;
    owner?: Owner2;
    investor_id?: string;
    ratios: Ratios5[];
}

export class Anonymous163 implements IAnonymous163 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous163) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous163 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous163();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous163 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous164 implements IAnonymous164 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous164) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous164 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous164();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous164 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous165 implements IAnonymous165 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous165) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous165 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous165();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous165 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous166 implements IAnonymous166 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous166) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous166 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous166();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous166 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous167 implements IAnonymous167 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous167) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous167 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous167();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous167 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous168 implements IAnonymous168 {
    /** system generated id `pft-XXXX-XXXX-XXXX-XXXX` */
    readonly portfolio_id!: string;
    portfolio_name!: string;
    readonly version!: number;
    owner?: Owner3;
    investor_id?: string;
    ratios!: Ratios6[];

    constructor(data?: IAnonymous168) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.ratios = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).portfolio_id = _data["portfolio_id"];
            this.portfolio_name = _data["portfolio_name"];
            (<any>this).version = _data["version"];
            this.owner = _data["owner"];
            this.investor_id = _data["investor_id"];
            if (Array.isArray(_data["ratios"])) {
                this.ratios = [] as any;
                for (let item of _data["ratios"])
                    this.ratios!.push(item);
            }
        }
    }

    static fromJS(data: any): Anonymous168 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous168();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["portfolio_id"] = this.portfolio_id;
        data["portfolio_name"] = this.portfolio_name;
        data["version"] = this.version;
        data["owner"] = this.owner;
        data["investor_id"] = this.investor_id;
        if (Array.isArray(this.ratios)) {
            data["ratios"] = [];
            for (let item of this.ratios)
                data["ratios"].push(item);
        }
        return data; 
    }
}

export interface IAnonymous168 {
    /** system generated id `pft-XXXX-XXXX-XXXX-XXXX` */
    portfolio_id: string;
    portfolio_name: string;
    version: number;
    owner?: Owner3;
    investor_id?: string;
    ratios: Ratios6[];
}

export class Anonymous169 implements IAnonymous169 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous169) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous169 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous169();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous169 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous170 implements IAnonymous170 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous170) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous170 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous170();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous170 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous171 implements IAnonymous171 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous171) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous171 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous171();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous171 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous172 implements IAnonymous172 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous172) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous172 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous172();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous172 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous173 implements IAnonymous173 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous173) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous173 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous173();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous173 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous174 implements IAnonymous174 {
    /** system generated id `pft-XXXX-XXXX-XXXX-XXXX` */
    readonly portfolio_id!: string;
    portfolio_name!: string;
    readonly version!: number;
    owner?: Owner4;
    investor_id?: string;
    ratios!: Ratios7[];

    constructor(data?: IAnonymous174) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.ratios = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).portfolio_id = _data["portfolio_id"];
            this.portfolio_name = _data["portfolio_name"];
            (<any>this).version = _data["version"];
            this.owner = _data["owner"];
            this.investor_id = _data["investor_id"];
            if (Array.isArray(_data["ratios"])) {
                this.ratios = [] as any;
                for (let item of _data["ratios"])
                    this.ratios!.push(item);
            }
        }
    }

    static fromJS(data: any): Anonymous174 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous174();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["portfolio_id"] = this.portfolio_id;
        data["portfolio_name"] = this.portfolio_name;
        data["version"] = this.version;
        data["owner"] = this.owner;
        data["investor_id"] = this.investor_id;
        if (Array.isArray(this.ratios)) {
            data["ratios"] = [];
            for (let item of this.ratios)
                data["ratios"].push(item);
        }
        return data; 
    }
}

export interface IAnonymous174 {
    /** system generated id `pft-XXXX-XXXX-XXXX-XXXX` */
    portfolio_id: string;
    portfolio_name: string;
    version: number;
    owner?: Owner4;
    investor_id?: string;
    ratios: Ratios7[];
}

export class Anonymous175 implements IAnonymous175 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous175) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous175 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous175();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous175 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous176 implements IAnonymous176 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous176) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous176 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous176();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous176 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous177 implements IAnonymous177 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous177) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous177 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous177();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous177 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous178 implements IAnonymous178 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous178) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous178 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous178();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous178 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous179 implements IAnonymous179 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous179) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous179 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous179();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous179 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous180 implements IAnonymous180 {
    /** status of the transaction request
. `submitted`: All requested transactions submitted
. `failed` : All requested transactions failed
. `partially_submitted`: Some (but not all) requested transactions submitted
 */
    status!: Status4;
    /** error message if status is `failed` */
    message?: string;
    transactions?: Transactions[];

    constructor(data?: IAnonymous180) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"];
            this.message = _data["message"];
            if (Array.isArray(_data["transactions"])) {
                this.transactions = [] as any;
                for (let item of _data["transactions"])
                    this.transactions!.push(item);
            }
        }
    }

    static fromJS(data: any): Anonymous180 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous180();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["message"] = this.message;
        if (Array.isArray(this.transactions)) {
            data["transactions"] = [];
            for (let item of this.transactions)
                data["transactions"].push(item);
        }
        return data; 
    }
}

export interface IAnonymous180 {
    /** status of the transaction request
. `submitted`: All requested transactions submitted
. `failed` : All requested transactions failed
. `partially_submitted`: Some (but not all) requested transactions submitted
 */
    status: Status4;
    /** error message if status is `failed` */
    message?: string;
    transactions?: Transactions[];
}

export class Anonymous181 implements IAnonymous181 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous181) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous181 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous181();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous181 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous182 implements IAnonymous182 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous182) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous182 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous182();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous182 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous183 implements IAnonymous183 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous183) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous183 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous183();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous183 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous184 implements IAnonymous184 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous184) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous184 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous184();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous184 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous185 implements IAnonymous185 {
    /** Human readable description of the error */
    message!: string;
    /** Current status of the original request */
    status!: Status5;
    /** Stringified original response body if status is `COMPLETE` */
    response?: any;

    constructor(data?: IAnonymous185) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.status = _data["status"];
            this.response = _data["response"];
        }
    }

    static fromJS(data: any): Anonymous185 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous185();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["status"] = this.status;
        data["response"] = this.response;
        return data; 
    }
}

export interface IAnonymous185 {
    /** Human readable description of the error */
    message: string;
    /** Current status of the original request */
    status: Status5;
    /** Stringified original response body if status is `COMPLETE` */
    response?: any;
}

export class Anonymous186 implements IAnonymous186 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous186) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous186 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous186();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous186 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous187 implements IAnonymous187 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous187) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous187 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous187();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous187 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous188 implements IAnonymous188 {
    /** status of the transaction request
.  `submitted`: All requested transactions submitted
.  `failed` : All requested transactions failed
.  `partially_submitted`: Some (but not all) requested transactions submitted
  */
    status!: Status6;
    /** error message if status is `failed` */
    message?: string;
    transactions?: Transactions2[];

    constructor(data?: IAnonymous188) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"];
            this.message = _data["message"];
            if (Array.isArray(_data["transactions"])) {
                this.transactions = [] as any;
                for (let item of _data["transactions"])
                    this.transactions!.push(item);
            }
        }
    }

    static fromJS(data: any): Anonymous188 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous188();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["message"] = this.message;
        if (Array.isArray(this.transactions)) {
            data["transactions"] = [];
            for (let item of this.transactions)
                data["transactions"].push(item);
        }
        return data; 
    }
}

export interface IAnonymous188 {
    /** status of the transaction request
.  `submitted`: All requested transactions submitted
.  `failed` : All requested transactions failed
.  `partially_submitted`: Some (but not all) requested transactions submitted
  */
    status: Status6;
    /** error message if status is `failed` */
    message?: string;
    transactions?: Transactions2[];
}

export class Anonymous189 implements IAnonymous189 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous189) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous189 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous189();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous189 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous190 implements IAnonymous190 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous190) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous190 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous190();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous190 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous191 implements IAnonymous191 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous191) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous191 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous191();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous191 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous192 implements IAnonymous192 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous192) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous192 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous192();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous192 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous193 implements IAnonymous193 {
    /** Human readable description of the error */
    message!: string;
    /** Current status of the original request */
    status!: Status7;
    /** Stringified original response body if status is `COMPLETE` */
    response?: any;

    constructor(data?: IAnonymous193) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.status = _data["status"];
            this.response = _data["response"];
        }
    }

    static fromJS(data: any): Anonymous193 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous193();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["status"] = this.status;
        data["response"] = this.response;
        return data; 
    }
}

export interface IAnonymous193 {
    /** Human readable description of the error */
    message: string;
    /** Current status of the original request */
    status: Status7;
    /** Stringified original response body if status is `COMPLETE` */
    response?: any;
}

export class Anonymous194 implements IAnonymous194 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous194) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous194 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous194();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous194 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export class Anonymous195 implements IAnonymous195 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message!: string;

    constructor(data?: IAnonymous195) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.error_code = _data["error_code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Anonymous195 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous195();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error_code"] = this.error_code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IAnonymous195 {
    /** Optional error code */
    error_code?: string;
    /** Human readable description of the error */
    message: string;
}

export enum IdempotencyErrorStatus {
    PROCESSING = "PROCESSING",
    COMPLETE = "COMPLETE",
}

export enum InvestorStatus {
    Kyc_pending = "kyc_pending",
    Kyc_failed = "kyc_failed",
    Inactive = "inactive",
    Active = "active",
}

export enum InvestorNationality {
    UK = "UK",
}

export enum InvestorKyc_aml_status {
    Submitted = "submitted",
    Kyc_failed_error = "kyc_failed_error",
    Pending = "pending",
    Clear = "clear",
    Not_started = "not_started",
}

export enum InvestorDealing_status {
    Inactive = "inactive",
    Active = "active",
}

export class Id_numbers implements IId_numbers {
    id_type!: string;
    id_number!: string;

    constructor(data?: IId_numbers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id_type = _data["id_type"];
            this.id_number = _data["id_number"];
        }
    }

    static fromJS(data: any): Id_numbers {
        data = typeof data === 'object' ? data : {};
        let result = new Id_numbers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id_type"] = this.id_type;
        data["id_number"] = this.id_number;
        return data; 
    }
}

export interface IId_numbers {
    id_type: string;
    id_number: string;
}

export class Address implements IAddress {
    postal_code!: string | undefined;
    address_line?: string | undefined;
    street_name?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    /** ISO 3 digit code is required */
    country!: string;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.postal_code = _data["postal_code"];
            this.address_line = _data["address_line"];
            this.street_name = _data["street_name"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.country = _data["country"];
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["postal_code"] = this.postal_code;
        data["address_line"] = this.address_line;
        data["street_name"] = this.street_name;
        data["city"] = this.city;
        data["state"] = this.state;
        data["country"] = this.country;
        return data; 
    }
}

export interface IAddress {
    postal_code: string | undefined;
    address_line?: string | undefined;
    street_name?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    /** ISO 3 digit code is required */
    country: string;
}

export class Date_of_birth implements IDate_of_birth {
    /** four digit string `YYYY` */
    year?: string;
    /** two digit string `MM` */
    month?: string;
    /** two digit string `DD` */
    day?: string;

    constructor(data?: IDate_of_birth) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.month = _data["month"];
            this.day = _data["day"];
        }
    }

    static fromJS(data: any): Date_of_birth {
        data = typeof data === 'object' ? data : {};
        let result = new Date_of_birth();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["month"] = this.month;
        data["day"] = this.day;
        return data; 
    }
}

export interface IDate_of_birth {
    /** four digit string `YYYY` */
    year?: string;
    /** two digit string `MM` */
    month?: string;
    /** two digit string `DD` */
    day?: string;
}

export enum BodyStatus {
    Kyc_pending = "kyc_pending",
    Kyc_failed = "kyc_failed",
    Inactive = "inactive",
    Active = "active",
}

export enum BodyNationality {
    UK = "UK",
}

export enum BodyKyc_aml_status {
    Submitted = "submitted",
    Kyc_failed_error = "kyc_failed_error",
    Pending = "pending",
    Clear = "clear",
    Not_started = "not_started",
}

export enum BodyDealing_status {
    Inactive = "inactive",
    Active = "active",
}

export class Id_numbers2 implements IId_numbers2 {
    id_type!: string;
    id_number!: string;

    constructor(data?: IId_numbers2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id_type = _data["id_type"];
            this.id_number = _data["id_number"];
        }
    }

    static fromJS(data: any): Id_numbers2 {
        data = typeof data === 'object' ? data : {};
        let result = new Id_numbers2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id_type"] = this.id_type;
        data["id_number"] = this.id_number;
        return data; 
    }
}

export interface IId_numbers2 {
    id_type: string;
    id_number: string;
}

export class Address2 implements IAddress2 {
    postal_code!: string | undefined;
    address_line?: string | undefined;
    street_name?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    /** ISO 3 digit code is required */
    country!: string;

    constructor(data?: IAddress2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.postal_code = _data["postal_code"];
            this.address_line = _data["address_line"];
            this.street_name = _data["street_name"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.country = _data["country"];
        }
    }

    static fromJS(data: any): Address2 {
        data = typeof data === 'object' ? data : {};
        let result = new Address2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["postal_code"] = this.postal_code;
        data["address_line"] = this.address_line;
        data["street_name"] = this.street_name;
        data["city"] = this.city;
        data["state"] = this.state;
        data["country"] = this.country;
        return data; 
    }
}

export interface IAddress2 {
    postal_code: string | undefined;
    address_line?: string | undefined;
    street_name?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    /** ISO 3 digit code is required */
    country: string;
}

export class Date_of_birth2 implements IDate_of_birth2 {
    /** four digit string `YYYY` */
    year?: string;
    /** two digit string `MM` */
    month?: string;
    /** two digit string `DD` */
    day?: string;

    constructor(data?: IDate_of_birth2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.month = _data["month"];
            this.day = _data["day"];
        }
    }

    static fromJS(data: any): Date_of_birth2 {
        data = typeof data === 'object' ? data : {};
        let result = new Date_of_birth2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["month"] = this.month;
        data["day"] = this.day;
        return data; 
    }
}

export interface IDate_of_birth2 {
    /** four digit string `YYYY` */
    year?: string;
    /** two digit string `MM` */
    month?: string;
    /** two digit string `DD` */
    day?: string;
}

export enum Body3Owner {
    Investor = "investor",
}

export class Ratios implements IRatios {
    investment_product_id!: string;
    /** must be in correct pattern (eg: 25.00, 33.34, 50.25, 100.00) */
    ratio!: string;

    constructor(data?: IRatios) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.investment_product_id = _data["investment_product_id"];
            this.ratio = _data["ratio"];
        }
    }

    static fromJS(data: any): Ratios {
        data = typeof data === 'object' ? data : {};
        let result = new Ratios();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investment_product_id"] = this.investment_product_id;
        data["ratio"] = this.ratio;
        return data; 
    }
}

export interface IRatios {
    investment_product_id: string;
    /** must be in correct pattern (eg: 25.00, 33.34, 50.25, 100.00) */
    ratio: string;
}

export enum Body4Payment_type {
    Stripe = "stripe",
}

export enum Body4Purpose {
    Cash = "cash",
    Invest = "invest",
}

export class Investment_instructions implements IInvestment_instructions {
    investment_product_id!: string;
    quantity!: number;

    constructor(data?: IInvestment_instructions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.investment_product_id = _data["investment_product_id"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): Investment_instructions {
        data = typeof data === 'object' ? data : {};
        let result = new Investment_instructions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investment_product_id"] = this.investment_product_id;
        data["quantity"] = this.quantity;
        return data; 
    }
}

export interface IInvestment_instructions {
    investment_product_id: string;
    quantity: number;
}

export enum Body7Owner {
    Investor = "investor",
}

export class Ratios2 implements IRatios2 {
    investment_product_id!: string;
    /** must be in correct pattern (eg: 25.00, 33.34, 50.25, 100.00) */
    ratio!: string;

    constructor(data?: IRatios2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.investment_product_id = _data["investment_product_id"];
            this.ratio = _data["ratio"];
        }
    }

    static fromJS(data: any): Ratios2 {
        data = typeof data === 'object' ? data : {};
        let result = new Ratios2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investment_product_id"] = this.investment_product_id;
        data["ratio"] = this.ratio;
        return data; 
    }
}

export interface IRatios2 {
    investment_product_id: string;
    /** must be in correct pattern (eg: 25.00, 33.34, 50.25, 100.00) */
    ratio: string;
}

export enum Body8Owner {
    Investor = "investor",
}

export class Ratios3 implements IRatios3 {
    investment_product_id!: string;
    /** must be in correct pattern (eg: 25.00, 33.34, 50.25, 100.00) */
    ratio!: string;

    constructor(data?: IRatios3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.investment_product_id = _data["investment_product_id"];
            this.ratio = _data["ratio"];
        }
    }

    static fromJS(data: any): Ratios3 {
        data = typeof data === 'object' ? data : {};
        let result = new Ratios3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investment_product_id"] = this.investment_product_id;
        data["ratio"] = this.ratio;
        return data; 
    }
}

export interface IRatios3 {
    investment_product_id: string;
    /** must be in correct pattern (eg: 25.00, 33.34, 50.25, 100.00) */
    ratio: string;
}

/** Definition of an single instruction(buy|sell) */
export class Investment_instructions2 implements IInvestment_instructions2 {
    investment_product_id!: string;
    /** require if `value` is not available */
    quantity?: number;
    /** must be in correct pattern (eg: 25.00, 332.34, 1050.25).
 require if `quantity` is not available */
    value?: string;

    constructor(data?: IInvestment_instructions2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.investment_product_id = _data["investment_product_id"];
            this.quantity = _data["quantity"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): Investment_instructions2 {
        data = typeof data === 'object' ? data : {};
        let result = new Investment_instructions2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investment_product_id"] = this.investment_product_id;
        data["quantity"] = this.quantity;
        data["value"] = this.value;
        return data; 
    }
}

/** Definition of an single instruction(buy|sell) */
export interface IInvestment_instructions2 {
    investment_product_id: string;
    /** require if `value` is not available */
    quantity?: number;
    /** must be in correct pattern (eg: 25.00, 332.34, 1050.25).
 require if `quantity` is not available */
    value?: string;
}

/** Definition of an single instruction(buy|sell) */
export class Sell_instructions implements ISell_instructions {
    investment_product_id!: string;
    /** require if `value` is not available */
    quantity?: number;
    /** must be in correct pattern (eg: 25.00, 332.34, 1050.25).
 require if `quantity` is not available */
    value?: string;

    constructor(data?: ISell_instructions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.investment_product_id = _data["investment_product_id"];
            this.quantity = _data["quantity"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): Sell_instructions {
        data = typeof data === 'object' ? data : {};
        let result = new Sell_instructions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investment_product_id"] = this.investment_product_id;
        data["quantity"] = this.quantity;
        data["value"] = this.value;
        return data; 
    }
}

/** Definition of an single instruction(buy|sell) */
export interface ISell_instructions {
    investment_product_id: string;
    /** require if `value` is not available */
    quantity?: number;
    /** must be in correct pattern (eg: 25.00, 332.34, 1050.25).
 require if `quantity` is not available */
    value?: string;
}

/** JSON for the Investor resource type */
export class Investors implements IInvestors {
    investor_id!: string;
    title!: string;
    gender!: string;
    first_name!: string;
    last_name!: string;
    readonly status?: InvestorsStatus;
    email!: string;
    mobile_number!: string;
    home_number!: string;
    office_number!: string;
    nationality!: InvestorsNationality;
    national_insurance_number!: string;
    readonly kyc_aml_status?: InvestorsKyc_aml_status;
    readonly dealing_status?: InvestorsDealing_status;
    id_numbers!: Id_numbers5[];
    address!: Address5;
    mifid_tax_id!: string;
    uk_tax_resident!: boolean;
    date_of_birth!: Date_of_birth5;
    readonly kyc_aml_status_last_updated?: Date;
    readonly created_at?: Date;
    readonly deleted_at?: Date;

    constructor(data?: IInvestors) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.id_numbers = [];
            this.address = new Address5();
            this.date_of_birth = new Date_of_birth5();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.investor_id = _data["investor_id"];
            this.title = _data["title"];
            this.gender = _data["gender"];
            this.first_name = _data["first_name"];
            this.last_name = _data["last_name"];
            (<any>this).status = _data["status"];
            this.email = _data["email"];
            this.mobile_number = _data["mobile_number"];
            this.home_number = _data["home_number"];
            this.office_number = _data["office_number"];
            this.nationality = _data["nationality"];
            this.national_insurance_number = _data["national_insurance_number"];
            (<any>this).kyc_aml_status = _data["kyc_aml_status"];
            (<any>this).dealing_status = _data["dealing_status"];
            if (Array.isArray(_data["id_numbers"])) {
                this.id_numbers = [] as any;
                for (let item of _data["id_numbers"])
                    this.id_numbers!.push(Id_numbers5.fromJS(item));
            }
            this.address = _data["address"] ? Address5.fromJS(_data["address"]) : new Address5();
            this.mifid_tax_id = _data["mifid_tax_id"];
            this.uk_tax_resident = _data["uk_tax_resident"];
            this.date_of_birth = _data["date_of_birth"] ? Date_of_birth5.fromJS(_data["date_of_birth"]) : new Date_of_birth5();
            (<any>this).kyc_aml_status_last_updated = _data["kyc_aml_status_last_updated"] ? new Date(_data["kyc_aml_status_last_updated"].toString()) : <any>undefined;
            (<any>this).created_at = _data["created_at"] ? new Date(_data["created_at"].toString()) : <any>undefined;
            (<any>this).deleted_at = _data["deleted_at"] ? new Date(_data["deleted_at"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Investors {
        data = typeof data === 'object' ? data : {};
        let result = new Investors();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investor_id"] = this.investor_id;
        data["title"] = this.title;
        data["gender"] = this.gender;
        data["first_name"] = this.first_name;
        data["last_name"] = this.last_name;
        data["status"] = this.status;
        data["email"] = this.email;
        data["mobile_number"] = this.mobile_number;
        data["home_number"] = this.home_number;
        data["office_number"] = this.office_number;
        data["nationality"] = this.nationality;
        data["national_insurance_number"] = this.national_insurance_number;
        data["kyc_aml_status"] = this.kyc_aml_status;
        data["dealing_status"] = this.dealing_status;
        if (Array.isArray(this.id_numbers)) {
            data["id_numbers"] = [];
            for (let item of this.id_numbers)
                data["id_numbers"].push(item.toJSON());
        }
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["mifid_tax_id"] = this.mifid_tax_id;
        data["uk_tax_resident"] = this.uk_tax_resident;
        data["date_of_birth"] = this.date_of_birth ? this.date_of_birth.toJSON() : <any>undefined;
        data["kyc_aml_status_last_updated"] = this.kyc_aml_status_last_updated ? this.kyc_aml_status_last_updated.toISOString() : <any>undefined;
        data["created_at"] = this.created_at ? this.created_at.toISOString() : <any>undefined;
        data["deleted_at"] = this.deleted_at ? this.deleted_at.toISOString() : <any>undefined;
        return data; 
    }
}

/** JSON for the Investor resource type */
export interface IInvestors {
    investor_id: string;
    title: string;
    gender: string;
    first_name: string;
    last_name: string;
    status?: InvestorsStatus;
    email: string;
    mobile_number: string;
    home_number: string;
    office_number: string;
    nationality: InvestorsNationality;
    national_insurance_number: string;
    kyc_aml_status?: InvestorsKyc_aml_status;
    dealing_status?: InvestorsDealing_status;
    id_numbers: Id_numbers5[];
    address: Address5;
    mifid_tax_id: string;
    uk_tax_resident: boolean;
    date_of_birth: Date_of_birth5;
    kyc_aml_status_last_updated?: Date;
    created_at?: Date;
    deleted_at?: Date;
}

export enum Status {
    Kyc_pending = "kyc_pending",
    Kyc_failed = "kyc_failed",
    Inactive = "inactive",
    Active = "active",
}

export enum Nationality {
    UK = "UK",
}

export enum Kyc_aml_status {
    Submitted = "submitted",
    Kyc_failed_error = "kyc_failed_error",
    Pending = "pending",
    Clear = "clear",
    Not_started = "not_started",
}

export enum Dealing_status {
    Inactive = "inactive",
    Active = "active",
}

export class Id_numbers3 implements IId_numbers3 {
    id_type!: string;
    id_number!: string;

    constructor(data?: IId_numbers3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id_type = _data["id_type"];
            this.id_number = _data["id_number"];
        }
    }

    static fromJS(data: any): Id_numbers3 {
        data = typeof data === 'object' ? data : {};
        let result = new Id_numbers3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id_type"] = this.id_type;
        data["id_number"] = this.id_number;
        return data; 
    }
}

export interface IId_numbers3 {
    id_type: string;
    id_number: string;
}

export class Address3 implements IAddress3 {
    postal_code!: string | undefined;
    address_line?: string | undefined;
    street_name?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    /** ISO 3 digit code is required */
    country!: string;

    constructor(data?: IAddress3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.postal_code = _data["postal_code"];
            this.address_line = _data["address_line"];
            this.street_name = _data["street_name"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.country = _data["country"];
        }
    }

    static fromJS(data: any): Address3 {
        data = typeof data === 'object' ? data : {};
        let result = new Address3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["postal_code"] = this.postal_code;
        data["address_line"] = this.address_line;
        data["street_name"] = this.street_name;
        data["city"] = this.city;
        data["state"] = this.state;
        data["country"] = this.country;
        return data; 
    }
}

export interface IAddress3 {
    postal_code: string | undefined;
    address_line?: string | undefined;
    street_name?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    /** ISO 3 digit code is required */
    country: string;
}

export class Date_of_birth3 implements IDate_of_birth3 {
    /** four digit string `YYYY` */
    year?: string;
    /** two digit string `MM` */
    month?: string;
    /** two digit string `DD` */
    day?: string;

    constructor(data?: IDate_of_birth3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.month = _data["month"];
            this.day = _data["day"];
        }
    }

    static fromJS(data: any): Date_of_birth3 {
        data = typeof data === 'object' ? data : {};
        let result = new Date_of_birth3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["month"] = this.month;
        data["day"] = this.day;
        return data; 
    }
}

export interface IDate_of_birth3 {
    /** four digit string `YYYY` */
    year?: string;
    /** two digit string `MM` */
    month?: string;
    /** two digit string `DD` */
    day?: string;
}

export enum Status2 {
    Kyc_pending = "kyc_pending",
    Kyc_failed = "kyc_failed",
    Inactive = "inactive",
    Active = "active",
}

export enum Nationality2 {
    UK = "UK",
}

export enum Kyc_aml_status2 {
    Submitted = "submitted",
    Kyc_failed_error = "kyc_failed_error",
    Pending = "pending",
    Clear = "clear",
    Not_started = "not_started",
}

export enum Dealing_status2 {
    Inactive = "inactive",
    Active = "active",
}

export class Id_numbers4 implements IId_numbers4 {
    id_type!: string;
    id_number!: string;

    constructor(data?: IId_numbers4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id_type = _data["id_type"];
            this.id_number = _data["id_number"];
        }
    }

    static fromJS(data: any): Id_numbers4 {
        data = typeof data === 'object' ? data : {};
        let result = new Id_numbers4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id_type"] = this.id_type;
        data["id_number"] = this.id_number;
        return data; 
    }
}

export interface IId_numbers4 {
    id_type: string;
    id_number: string;
}

export class Address4 implements IAddress4 {
    postal_code!: string | undefined;
    address_line?: string | undefined;
    street_name?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    /** ISO 3 digit code is required */
    country!: string;

    constructor(data?: IAddress4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.postal_code = _data["postal_code"];
            this.address_line = _data["address_line"];
            this.street_name = _data["street_name"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.country = _data["country"];
        }
    }

    static fromJS(data: any): Address4 {
        data = typeof data === 'object' ? data : {};
        let result = new Address4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["postal_code"] = this.postal_code;
        data["address_line"] = this.address_line;
        data["street_name"] = this.street_name;
        data["city"] = this.city;
        data["state"] = this.state;
        data["country"] = this.country;
        return data; 
    }
}

export interface IAddress4 {
    postal_code: string | undefined;
    address_line?: string | undefined;
    street_name?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    /** ISO 3 digit code is required */
    country: string;
}

export class Date_of_birth4 implements IDate_of_birth4 {
    /** four digit string `YYYY` */
    year?: string;
    /** two digit string `MM` */
    month?: string;
    /** two digit string `DD` */
    day?: string;

    constructor(data?: IDate_of_birth4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.month = _data["month"];
            this.day = _data["day"];
        }
    }

    static fromJS(data: any): Date_of_birth4 {
        data = typeof data === 'object' ? data : {};
        let result = new Date_of_birth4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["month"] = this.month;
        data["day"] = this.day;
        return data; 
    }
}

export interface IDate_of_birth4 {
    /** four digit string `YYYY` */
    year?: string;
    /** two digit string `MM` */
    month?: string;
    /** two digit string `DD` */
    day?: string;
}

export class Pots implements IPots {
    readonly investor_id?: string;
    /** system generated id `pt-XXXX-XXXX-XXXX-XXXX` */
    readonly pot_id?: string;
    pot_name!: string;
    financial_product_id!: string;
    portfolio_id?: string;

    constructor(data?: IPots) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).investor_id = _data["investor_id"];
            (<any>this).pot_id = _data["pot_id"];
            this.pot_name = _data["pot_name"];
            this.financial_product_id = _data["financial_product_id"];
            this.portfolio_id = _data["portfolio_id"];
        }
    }

    static fromJS(data: any): Pots {
        data = typeof data === 'object' ? data : {};
        let result = new Pots();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investor_id"] = this.investor_id;
        data["pot_id"] = this.pot_id;
        data["pot_name"] = this.pot_name;
        data["financial_product_id"] = this.financial_product_id;
        data["portfolio_id"] = this.portfolio_id;
        return data; 
    }
}

export interface IPots {
    investor_id?: string;
    /** system generated id `pt-XXXX-XXXX-XXXX-XXXX` */
    pot_id?: string;
    pot_name: string;
    financial_product_id: string;
    portfolio_id?: string;
}

export enum Owner {
    Investor = "investor",
}

export class Ratios4 implements IRatios4 {
    investment_product_id!: string;
    /** must be in correct pattern (eg: 25.00, 33.34, 50.25, 100.00) */
    ratio!: string;

    constructor(data?: IRatios4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.investment_product_id = _data["investment_product_id"];
            this.ratio = _data["ratio"];
        }
    }

    static fromJS(data: any): Ratios4 {
        data = typeof data === 'object' ? data : {};
        let result = new Ratios4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investment_product_id"] = this.investment_product_id;
        data["ratio"] = this.ratio;
        return data; 
    }
}

export interface IRatios4 {
    investment_product_id: string;
    /** must be in correct pattern (eg: 25.00, 33.34, 50.25, 100.00) */
    ratio: string;
}

export class Portfolio_templates implements IPortfolio_templates {
    readonly investor_id!: string;
    readonly owner!: Portfolio_templatesOwner;
    /** system generated id `pft-XXXX-XXXX-XXXX-XXXX` */
    readonly portfolio_id?: string;
    portfolio_name!: string;
    readonly version?: number;
    ratios!: Ratios8[];

    constructor(data?: IPortfolio_templates) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.ratios = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).investor_id = _data["investor_id"];
            (<any>this).owner = _data["owner"];
            (<any>this).portfolio_id = _data["portfolio_id"];
            this.portfolio_name = _data["portfolio_name"];
            (<any>this).version = _data["version"];
            if (Array.isArray(_data["ratios"])) {
                this.ratios = [] as any;
                for (let item of _data["ratios"])
                    this.ratios!.push(item);
            }
        }
    }

    static fromJS(data: any): Portfolio_templates {
        data = typeof data === 'object' ? data : {};
        let result = new Portfolio_templates();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investor_id"] = this.investor_id;
        data["owner"] = this.owner;
        data["portfolio_id"] = this.portfolio_id;
        data["portfolio_name"] = this.portfolio_name;
        data["version"] = this.version;
        if (Array.isArray(this.ratios)) {
            data["ratios"] = [];
            for (let item of this.ratios)
                data["ratios"].push(item);
        }
        return data; 
    }
}

export interface IPortfolio_templates {
    investor_id: string;
    owner: Portfolio_templatesOwner;
    /** system generated id `pft-XXXX-XXXX-XXXX-XXXX` */
    portfolio_id?: string;
    portfolio_name: string;
    version?: number;
    ratios: Ratios8[];
}

export enum Kyc_check_status {
    Error = "error",
    Active = "active",
}

export class Financial_products implements IFinancial_products {
    financial_product_id!: string;
    name!: string;
    availability?: string[];
    additional_cash_currencies?: string[];
    eligible_securities?: string[];
    dividend_options?: string[];
    investment_preferences?: Investment_preferences;
    withdrawal_preferences?: Withdrawal_preferences;
    interest_preferences?: Interest_preferences;
    /** Financial Product type id. example stocks_and_shares_isa */
    product_type!: string;

    constructor(data?: IFinancial_products) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.financial_product_id = _data["financial_product_id"];
            this.name = _data["name"];
            if (Array.isArray(_data["availability"])) {
                this.availability = [] as any;
                for (let item of _data["availability"])
                    this.availability!.push(item);
            }
            if (Array.isArray(_data["additional_cash_currencies"])) {
                this.additional_cash_currencies = [] as any;
                for (let item of _data["additional_cash_currencies"])
                    this.additional_cash_currencies!.push(item);
            }
            if (Array.isArray(_data["eligible_securities"])) {
                this.eligible_securities = [] as any;
                for (let item of _data["eligible_securities"])
                    this.eligible_securities!.push(item);
            }
            if (Array.isArray(_data["dividend_options"])) {
                this.dividend_options = [] as any;
                for (let item of _data["dividend_options"])
                    this.dividend_options!.push(item);
            }
            this.investment_preferences = _data["investment_preferences"] ? Investment_preferences.fromJS(_data["investment_preferences"]) : <any>undefined;
            this.withdrawal_preferences = _data["withdrawal_preferences"] ? Withdrawal_preferences.fromJS(_data["withdrawal_preferences"]) : <any>undefined;
            this.interest_preferences = _data["interest_preferences"] ? Interest_preferences.fromJS(_data["interest_preferences"]) : <any>undefined;
            this.product_type = _data["product_type"];
        }
    }

    static fromJS(data: any): Financial_products {
        data = typeof data === 'object' ? data : {};
        let result = new Financial_products();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["financial_product_id"] = this.financial_product_id;
        data["name"] = this.name;
        if (Array.isArray(this.availability)) {
            data["availability"] = [];
            for (let item of this.availability)
                data["availability"].push(item);
        }
        if (Array.isArray(this.additional_cash_currencies)) {
            data["additional_cash_currencies"] = [];
            for (let item of this.additional_cash_currencies)
                data["additional_cash_currencies"].push(item);
        }
        if (Array.isArray(this.eligible_securities)) {
            data["eligible_securities"] = [];
            for (let item of this.eligible_securities)
                data["eligible_securities"].push(item);
        }
        if (Array.isArray(this.dividend_options)) {
            data["dividend_options"] = [];
            for (let item of this.dividend_options)
                data["dividend_options"].push(item);
        }
        data["investment_preferences"] = this.investment_preferences ? this.investment_preferences.toJSON() : <any>undefined;
        data["withdrawal_preferences"] = this.withdrawal_preferences ? this.withdrawal_preferences.toJSON() : <any>undefined;
        data["interest_preferences"] = this.interest_preferences ? this.interest_preferences.toJSON() : <any>undefined;
        data["product_type"] = this.product_type;
        return data; 
    }
}

export interface IFinancial_products {
    financial_product_id: string;
    name: string;
    availability?: string[];
    additional_cash_currencies?: string[];
    eligible_securities?: string[];
    dividend_options?: string[];
    investment_preferences?: Investment_preferences;
    withdrawal_preferences?: Withdrawal_preferences;
    interest_preferences?: Interest_preferences;
    /** Financial Product type id. example stocks_and_shares_isa */
    product_type: string;
}

export class Payments implements IPayments {
    payment_id!: string;
    amount?: string;
    currency?: string;
    investor_id?: string;
    pot_id?: string;
    payment_type?: PaymentsPayment_type;
    purpose?: PaymentsPurpose;
    /** mandatory only if purpose:"invest" and pot does not have a portfolio template attached (e.g. An execution-only or direct-to-consumer wealth manager) */
    investment_instructions?: Investment_instructions4[] | undefined;
    /** Status of the payment

- `pending_confirmation`: Payment is pending approvals and confirmation
- `processing`: Payment is confirmed, and being processed. Depending on the payment method, this may be instantaneous (e.g. card) or take multiple days (e.g. cheque) 
- `succeeded`: Payment is successful. Cash is cleaned in account. 
- `cancelled`: Payment cancelled, and any held funds have been returned. 
- `failed`: Payment failed due to insufficient funds, invalid card details, network issues etc.  */
    status?: PaymentsStatus;

    constructor(data?: IPayments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.payment_id = _data["payment_id"];
            this.amount = _data["amount"];
            this.currency = _data["currency"];
            this.investor_id = _data["investor_id"];
            this.pot_id = _data["pot_id"];
            this.payment_type = _data["payment_type"];
            this.purpose = _data["purpose"];
            if (Array.isArray(_data["investment_instructions"])) {
                this.investment_instructions = [] as any;
                for (let item of _data["investment_instructions"])
                    this.investment_instructions!.push(item);
            }
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): Payments {
        data = typeof data === 'object' ? data : {};
        let result = new Payments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["payment_id"] = this.payment_id;
        data["amount"] = this.amount;
        data["currency"] = this.currency;
        data["investor_id"] = this.investor_id;
        data["pot_id"] = this.pot_id;
        data["payment_type"] = this.payment_type;
        data["purpose"] = this.purpose;
        if (Array.isArray(this.investment_instructions)) {
            data["investment_instructions"] = [];
            for (let item of this.investment_instructions)
                data["investment_instructions"].push(item);
        }
        data["status"] = this.status;
        return data; 
    }
}

export interface IPayments {
    payment_id: string;
    amount?: string;
    currency?: string;
    investor_id?: string;
    pot_id?: string;
    payment_type?: PaymentsPayment_type;
    purpose?: PaymentsPurpose;
    /** mandatory only if purpose:"invest" and pot does not have a portfolio template attached (e.g. An execution-only or direct-to-consumer wealth manager) */
    investment_instructions?: Investment_instructions4[] | undefined;
    /** Status of the payment

- `pending_confirmation`: Payment is pending approvals and confirmation
- `processing`: Payment is confirmed, and being processed. Depending on the payment method, this may be instantaneous (e.g. card) or take multiple days (e.g. cheque) 
- `succeeded`: Payment is successful. Cash is cleaned in account. 
- `cancelled`: Payment cancelled, and any held funds have been returned. 
- `failed`: Payment failed due to insufficient funds, invalid card details, network issues etc.  */
    status?: PaymentsStatus;
}

export enum Payment_type {
    Stripe = "stripe",
}

export class Stripe implements IStripe {
    client_secret!: string;
    publishable_key!: string;

    constructor(data?: IStripe) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.client_secret = _data["client_secret"];
            this.publishable_key = _data["publishable_key"];
        }
    }

    static fromJS(data: any): Stripe {
        data = typeof data === 'object' ? data : {};
        let result = new Stripe();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["client_secret"] = this.client_secret;
        data["publishable_key"] = this.publishable_key;
        return data; 
    }
}

export interface IStripe {
    client_secret: string;
    publishable_key: string;
}

export enum Purpose {
    Cash = "cash",
    Invest = "invest",
}

export class Investment_instructions3 implements IInvestment_instructions3 {
    investment_product_id!: string;
    quantity!: number;

    constructor(data?: IInvestment_instructions3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.investment_product_id = _data["investment_product_id"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): Investment_instructions3 {
        data = typeof data === 'object' ? data : {};
        let result = new Investment_instructions3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investment_product_id"] = this.investment_product_id;
        data["quantity"] = this.quantity;
        return data; 
    }
}

export interface IInvestment_instructions3 {
    investment_product_id: string;
    quantity: number;
}

export enum Status3 {
    PROCESSING = "PROCESSING",
    COMPLETE = "COMPLETE",
}

export class Holdings implements IHoldings {
    /** Investment product id of the holding. Will be 'cash' for cash holdings */
    readonly investment_product_id!: string;
    /** Quantity of the holding */
    readonly quantity!: number;
    /** Value of the holding. This will be based on the latest available market data */
    readonly value!: number;
    /** This portion of the held quantity is locked. For cash, this will be the value of a pending cash transfer. For a product, it will be the portion of the held quantity which is pending sell transaction confirmation. */
    readonly locked?: number;
    /** Type of the holding */
    readonly type!: HoldingsType;
    /** Sub state where applicable. All sub-types other than 'held' are ONLY used for pending or archived records */
    readonly subType!: HoldingsSubType;
    /** in = cash paymennt or pending buy transaction, out= cash out or pending sell transaction. */
    direction?: HoldingsDirection;
    /** optional. Will indicate the date where this record was last changed */
    date?: string;

    constructor(data?: IHoldings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).investment_product_id = _data["investment_product_id"];
            (<any>this).quantity = _data["quantity"];
            (<any>this).value = _data["value"];
            (<any>this).locked = _data["locked"];
            (<any>this).type = _data["type"];
            (<any>this).subType = _data["sub-type"];
            this.direction = _data["direction"];
            this.date = _data["date"];
        }
    }

    static fromJS(data: any): Holdings {
        data = typeof data === 'object' ? data : {};
        let result = new Holdings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investment_product_id"] = this.investment_product_id;
        data["quantity"] = this.quantity;
        data["value"] = this.value;
        data["locked"] = this.locked;
        data["type"] = this.type;
        data["sub-type"] = this.subType;
        data["direction"] = this.direction;
        data["date"] = this.date;
        return data; 
    }
}

export interface IHoldings {
    /** Investment product id of the holding. Will be 'cash' for cash holdings */
    investment_product_id: string;
    /** Quantity of the holding */
    quantity: number;
    /** Value of the holding. This will be based on the latest available market data */
    value: number;
    /** This portion of the held quantity is locked. For cash, this will be the value of a pending cash transfer. For a product, it will be the portion of the held quantity which is pending sell transaction confirmation. */
    locked?: number;
    /** Type of the holding */
    type: HoldingsType;
    /** Sub state where applicable. All sub-types other than 'held' are ONLY used for pending or archived records */
    subType: HoldingsSubType;
    /** in = cash paymennt or pending buy transaction, out= cash out or pending sell transaction. */
    direction?: HoldingsDirection;
    /** optional. Will indicate the date where this record was last changed */
    date?: string;
}

export enum Pot_id {
    All = "all",
}

export enum Pot_id2 {
    All = "all",
}

export class Holdings2 implements IHoldings2 {
    /** Investment product id of the holding. Will be 'cash' for cash holdings */
    readonly investment_product_id!: string;
    /** Quantity of the holding */
    readonly quantity!: number;
    /** Value of the holding. This will be based on the latest available market data */
    readonly value!: number;
    /** This portion of the held quantity is locked. For cash, this will be the value of a pending cash transfer. For a product, it will be the portion of the held quantity which is pending sell transaction confirmation. */
    readonly locked?: number;
    /** Type of the holding */
    readonly type!: Holdings2Type;
    /** Sub state where applicable. All sub-types other than 'held' are ONLY used for pending or archived records */
    readonly subType!: Holdings2SubType;
    /** in = cash paymennt or pending buy transaction, out= cash out or pending sell transaction. */
    direction?: Holdings2Direction;
    /** optional. Will indicate the date where this record was last changed */
    date?: string;

    constructor(data?: IHoldings2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).investment_product_id = _data["investment_product_id"];
            (<any>this).quantity = _data["quantity"];
            (<any>this).value = _data["value"];
            (<any>this).locked = _data["locked"];
            (<any>this).type = _data["type"];
            (<any>this).subType = _data["sub-type"];
            this.direction = _data["direction"];
            this.date = _data["date"];
        }
    }

    static fromJS(data: any): Holdings2 {
        data = typeof data === 'object' ? data : {};
        let result = new Holdings2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investment_product_id"] = this.investment_product_id;
        data["quantity"] = this.quantity;
        data["value"] = this.value;
        data["locked"] = this.locked;
        data["type"] = this.type;
        data["sub-type"] = this.subType;
        data["direction"] = this.direction;
        data["date"] = this.date;
        return data; 
    }
}

export interface IHoldings2 {
    /** Investment product id of the holding. Will be 'cash' for cash holdings */
    investment_product_id: string;
    /** Quantity of the holding */
    quantity: number;
    /** Value of the holding. This will be based on the latest available market data */
    value: number;
    /** This portion of the held quantity is locked. For cash, this will be the value of a pending cash transfer. For a product, it will be the portion of the held quantity which is pending sell transaction confirmation. */
    locked?: number;
    /** Type of the holding */
    type: Holdings2Type;
    /** Sub state where applicable. All sub-types other than 'held' are ONLY used for pending or archived records */
    subType: Holdings2SubType;
    /** in = cash paymennt or pending buy transaction, out= cash out or pending sell transaction. */
    direction?: Holdings2Direction;
    /** optional. Will indicate the date where this record was last changed */
    date?: string;
}

export class Investment_products implements IInvestment_products {
    readonly investment_product_id?: string;
    readonly iSIN?: string;
    readonly name?: string;
    readonly asset_type?: Investment_productsAsset_type;
    readonly asset_sub_type?: string;
    readonly currency?: string;
    readonly pricing_method?: string;
    readonly fund_asset_type?: string;
    readonly fund_code?: string;
    readonly applicable_financial_products?: Investment_productsApplicable_financial_products;

    constructor(data?: IInvestment_products) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).investment_product_id = _data["investment_product_id"];
            (<any>this).iSIN = _data["ISIN"];
            (<any>this).name = _data["name"];
            (<any>this).asset_type = _data["asset_type"];
            (<any>this).asset_sub_type = _data["asset_sub_type"];
            (<any>this).currency = _data["currency"];
            (<any>this).pricing_method = _data["pricing_method"];
            (<any>this).fund_asset_type = _data["fund_asset_type"];
            (<any>this).fund_code = _data["fund_code"];
            if (Array.isArray(_data["applicable_financial_products"])) {
                (<any>this).applicable_financial_products = [] as any;
                for (let item of _data["applicable_financial_products"])
                    (<any>this).applicable_financial_products!.push(item);
            }
        }
    }

    static fromJS(data: any): Investment_products {
        data = typeof data === 'object' ? data : {};
        let result = new Investment_products();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investment_product_id"] = this.investment_product_id;
        data["ISIN"] = this.iSIN;
        data["name"] = this.name;
        data["asset_type"] = this.asset_type;
        data["asset_sub_type"] = this.asset_sub_type;
        data["currency"] = this.currency;
        data["pricing_method"] = this.pricing_method;
        data["fund_asset_type"] = this.fund_asset_type;
        data["fund_code"] = this.fund_code;
        if (Array.isArray(this.applicable_financial_products)) {
            data["applicable_financial_products"] = [];
            for (let item of this.applicable_financial_products)
                data["applicable_financial_products"].push(item);
        }
        return data; 
    }
}

export interface IInvestment_products {
    investment_product_id?: string;
    iSIN?: string;
    name?: string;
    asset_type?: Investment_productsAsset_type;
    asset_sub_type?: string;
    currency?: string;
    pricing_method?: string;
    fund_asset_type?: string;
    fund_code?: string;
    applicable_financial_products?: Investment_productsApplicable_financial_products;
}

export class Investment_product_unit_prices implements IInvestment_product_unit_prices {
    readonly investment_product_id?: string;
    /** Numeral string with two decimal point precision */
    readonly current_price?: string;
    /** Currency of the current price */
    readonly currency?: string;
    readonly price_on_date?: Date;

    constructor(data?: IInvestment_product_unit_prices) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).investment_product_id = _data["investment_product_id"];
            (<any>this).current_price = _data["current_price"];
            (<any>this).currency = _data["currency"];
            (<any>this).price_on_date = _data["price_on_date"] ? new Date(_data["price_on_date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Investment_product_unit_prices {
        data = typeof data === 'object' ? data : {};
        let result = new Investment_product_unit_prices();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investment_product_id"] = this.investment_product_id;
        data["current_price"] = this.current_price;
        data["currency"] = this.currency;
        data["price_on_date"] = this.price_on_date ? formatDate(this.price_on_date) : <any>undefined;
        return data; 
    }
}

export interface IInvestment_product_unit_prices {
    investment_product_id?: string;
    /** Numeral string with two decimal point precision */
    current_price?: string;
    /** Currency of the current price */
    currency?: string;
    price_on_date?: Date;
}

export enum Asset_type {
    Funds = "funds",
}

export enum Applicable_financial_products {
    Isa = "isa",
}

export class Portfolio_templates2 implements IPortfolio_templates2 {
    /** system generated id `pft-XXXX-XXXX-XXXX-XXXX` */
    readonly portfolio_id!: string;
    portfolio_name!: string;
    readonly version!: number;
    owner?: Portfolio_templates2Owner;
    investor_id?: string;
    ratios!: Ratios9[];

    constructor(data?: IPortfolio_templates2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.ratios = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).portfolio_id = _data["portfolio_id"];
            this.portfolio_name = _data["portfolio_name"];
            (<any>this).version = _data["version"];
            this.owner = _data["owner"];
            this.investor_id = _data["investor_id"];
            if (Array.isArray(_data["ratios"])) {
                this.ratios = [] as any;
                for (let item of _data["ratios"])
                    this.ratios!.push(item);
            }
        }
    }

    static fromJS(data: any): Portfolio_templates2 {
        data = typeof data === 'object' ? data : {};
        let result = new Portfolio_templates2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["portfolio_id"] = this.portfolio_id;
        data["portfolio_name"] = this.portfolio_name;
        data["version"] = this.version;
        data["owner"] = this.owner;
        data["investor_id"] = this.investor_id;
        if (Array.isArray(this.ratios)) {
            data["ratios"] = [];
            for (let item of this.ratios)
                data["ratios"].push(item);
        }
        return data; 
    }
}

export interface IPortfolio_templates2 {
    /** system generated id `pft-XXXX-XXXX-XXXX-XXXX` */
    portfolio_id: string;
    portfolio_name: string;
    version: number;
    owner?: Portfolio_templates2Owner;
    investor_id?: string;
    ratios: Ratios9[];
}

export enum Owner2 {
    Investor = "investor",
}

export class Ratios5 implements IRatios5 {
    investment_product_id!: string;
    /** must be in correct pattern (eg: 25.00, 33.34, 50.25, 100.00) */
    ratio!: string;

    constructor(data?: IRatios5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.investment_product_id = _data["investment_product_id"];
            this.ratio = _data["ratio"];
        }
    }

    static fromJS(data: any): Ratios5 {
        data = typeof data === 'object' ? data : {};
        let result = new Ratios5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investment_product_id"] = this.investment_product_id;
        data["ratio"] = this.ratio;
        return data; 
    }
}

export interface IRatios5 {
    investment_product_id: string;
    /** must be in correct pattern (eg: 25.00, 33.34, 50.25, 100.00) */
    ratio: string;
}

export enum Owner3 {
    Investor = "investor",
}

export class Ratios6 implements IRatios6 {
    investment_product_id!: string;
    /** must be in correct pattern (eg: 25.00, 33.34, 50.25, 100.00) */
    ratio!: string;

    constructor(data?: IRatios6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.investment_product_id = _data["investment_product_id"];
            this.ratio = _data["ratio"];
        }
    }

    static fromJS(data: any): Ratios6 {
        data = typeof data === 'object' ? data : {};
        let result = new Ratios6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investment_product_id"] = this.investment_product_id;
        data["ratio"] = this.ratio;
        return data; 
    }
}

export interface IRatios6 {
    investment_product_id: string;
    /** must be in correct pattern (eg: 25.00, 33.34, 50.25, 100.00) */
    ratio: string;
}

export enum Owner4 {
    Investor = "investor",
}

export class Ratios7 implements IRatios7 {
    investment_product_id!: string;
    /** must be in correct pattern (eg: 25.00, 33.34, 50.25, 100.00) */
    ratio!: string;

    constructor(data?: IRatios7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.investment_product_id = _data["investment_product_id"];
            this.ratio = _data["ratio"];
        }
    }

    static fromJS(data: any): Ratios7 {
        data = typeof data === 'object' ? data : {};
        let result = new Ratios7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investment_product_id"] = this.investment_product_id;
        data["ratio"] = this.ratio;
        return data; 
    }
}

export interface IRatios7 {
    investment_product_id: string;
    /** must be in correct pattern (eg: 25.00, 33.34, 50.25, 100.00) */
    ratio: string;
}

export enum Status4 {
    Submitted = "submitted",
    Failed = "failed",
    Partially_submitted = "partially_submitted",
}

export class Transactions implements ITransactions {
    investment_product_id!: string;
    status?: TransactionsStatus;
    /** transaction_id if status is `submitted` */
    transaction_id?: string;
    /** quantity of the investment product */
    quantity?: number;
    /** error message if status is `failed` */
    message?: string;

    constructor(data?: ITransactions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.investment_product_id = _data["investment_product_id"];
            this.status = _data["status"];
            this.transaction_id = _data["transaction_id"];
            this.quantity = _data["quantity"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Transactions {
        data = typeof data === 'object' ? data : {};
        let result = new Transactions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investment_product_id"] = this.investment_product_id;
        data["status"] = this.status;
        data["transaction_id"] = this.transaction_id;
        data["quantity"] = this.quantity;
        data["message"] = this.message;
        return data; 
    }
}

export interface ITransactions {
    investment_product_id: string;
    status?: TransactionsStatus;
    /** transaction_id if status is `submitted` */
    transaction_id?: string;
    /** quantity of the investment product */
    quantity?: number;
    /** error message if status is `failed` */
    message?: string;
}

export enum Status5 {
    PROCESSING = "PROCESSING",
    COMPLETE = "COMPLETE",
}

export enum Status6 {
    Submitted = "submitted",
    Failed = "failed",
    Partially_submitted = "partially_submitted",
}

export class Transactions2 implements ITransactions2 {
    investment_product_id!: string;
    status?: Transactions2Status;
    /** transaction_id if status is `submitted` */
    transaction_id?: string;
    /** quantity of the investment product */
    quantity?: number;
    /** error message if status is `failed` */
    message?: string;

    constructor(data?: ITransactions2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.investment_product_id = _data["investment_product_id"];
            this.status = _data["status"];
            this.transaction_id = _data["transaction_id"];
            this.quantity = _data["quantity"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Transactions2 {
        data = typeof data === 'object' ? data : {};
        let result = new Transactions2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investment_product_id"] = this.investment_product_id;
        data["status"] = this.status;
        data["transaction_id"] = this.transaction_id;
        data["quantity"] = this.quantity;
        data["message"] = this.message;
        return data; 
    }
}

export interface ITransactions2 {
    investment_product_id: string;
    status?: Transactions2Status;
    /** transaction_id if status is `submitted` */
    transaction_id?: string;
    /** quantity of the investment product */
    quantity?: number;
    /** error message if status is `failed` */
    message?: string;
}

export enum Status7 {
    PROCESSING = "PROCESSING",
    COMPLETE = "COMPLETE",
}

export enum InvestorsStatus {
    Kyc_pending = "kyc_pending",
    Kyc_failed = "kyc_failed",
    Inactive = "inactive",
    Active = "active",
}

export enum InvestorsNationality {
    UK = "UK",
}

export enum InvestorsKyc_aml_status {
    Submitted = "submitted",
    Kyc_failed_error = "kyc_failed_error",
    Pending = "pending",
    Clear = "clear",
    Not_started = "not_started",
}

export enum InvestorsDealing_status {
    Inactive = "inactive",
    Active = "active",
}

export class Id_numbers5 implements IId_numbers5 {
    id_type!: string;
    id_number!: string;

    constructor(data?: IId_numbers5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id_type = _data["id_type"];
            this.id_number = _data["id_number"];
        }
    }

    static fromJS(data: any): Id_numbers5 {
        data = typeof data === 'object' ? data : {};
        let result = new Id_numbers5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id_type"] = this.id_type;
        data["id_number"] = this.id_number;
        return data; 
    }
}

export interface IId_numbers5 {
    id_type: string;
    id_number: string;
}

export class Address5 implements IAddress5 {
    postal_code!: string | undefined;
    address_line?: string | undefined;
    street_name?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    /** ISO 3 digit code is required */
    country!: string;

    constructor(data?: IAddress5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.postal_code = _data["postal_code"];
            this.address_line = _data["address_line"];
            this.street_name = _data["street_name"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.country = _data["country"];
        }
    }

    static fromJS(data: any): Address5 {
        data = typeof data === 'object' ? data : {};
        let result = new Address5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["postal_code"] = this.postal_code;
        data["address_line"] = this.address_line;
        data["street_name"] = this.street_name;
        data["city"] = this.city;
        data["state"] = this.state;
        data["country"] = this.country;
        return data; 
    }
}

export interface IAddress5 {
    postal_code: string | undefined;
    address_line?: string | undefined;
    street_name?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    /** ISO 3 digit code is required */
    country: string;
}

export class Date_of_birth5 implements IDate_of_birth5 {
    /** four digit string `YYYY` */
    year?: string;
    /** two digit string `MM` */
    month?: string;
    /** two digit string `DD` */
    day?: string;

    constructor(data?: IDate_of_birth5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.month = _data["month"];
            this.day = _data["day"];
        }
    }

    static fromJS(data: any): Date_of_birth5 {
        data = typeof data === 'object' ? data : {};
        let result = new Date_of_birth5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["month"] = this.month;
        data["day"] = this.day;
        return data; 
    }
}

export interface IDate_of_birth5 {
    /** four digit string `YYYY` */
    year?: string;
    /** two digit string `MM` */
    month?: string;
    /** two digit string `DD` */
    day?: string;
}

export enum Portfolio_templatesOwner {
    Investor = "investor",
}

export class Ratios8 implements IRatios8 {
    investment_product_id!: string;
    /** must be in correct pattern (eg: 25.00, 33.34, 50.25, 100.00) */
    ratio!: string;

    constructor(data?: IRatios8) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.investment_product_id = _data["investment_product_id"];
            this.ratio = _data["ratio"];
        }
    }

    static fromJS(data: any): Ratios8 {
        data = typeof data === 'object' ? data : {};
        let result = new Ratios8();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investment_product_id"] = this.investment_product_id;
        data["ratio"] = this.ratio;
        return data; 
    }
}

export interface IRatios8 {
    investment_product_id: string;
    /** must be in correct pattern (eg: 25.00, 33.34, 50.25, 100.00) */
    ratio: string;
}

export class Investment_preferences implements IInvestment_preferences {
    minimum_initial_investment?: string;
    minimum_regular_monthly_investment?: string;
    regular_investment_frequencies?: string[];
    regular_investment_dates?: string[];

    constructor(data?: IInvestment_preferences) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.minimum_initial_investment = _data["minimum_initial_investment"];
            this.minimum_regular_monthly_investment = _data["minimum_regular_monthly_investment"];
            if (Array.isArray(_data["regular_investment_frequencies"])) {
                this.regular_investment_frequencies = [] as any;
                for (let item of _data["regular_investment_frequencies"])
                    this.regular_investment_frequencies!.push(item);
            }
            if (Array.isArray(_data["regular_investment_dates"])) {
                this.regular_investment_dates = [] as any;
                for (let item of _data["regular_investment_dates"])
                    this.regular_investment_dates!.push(item);
            }
        }
    }

    static fromJS(data: any): Investment_preferences {
        data = typeof data === 'object' ? data : {};
        let result = new Investment_preferences();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["minimum_initial_investment"] = this.minimum_initial_investment;
        data["minimum_regular_monthly_investment"] = this.minimum_regular_monthly_investment;
        if (Array.isArray(this.regular_investment_frequencies)) {
            data["regular_investment_frequencies"] = [];
            for (let item of this.regular_investment_frequencies)
                data["regular_investment_frequencies"].push(item);
        }
        if (Array.isArray(this.regular_investment_dates)) {
            data["regular_investment_dates"] = [];
            for (let item of this.regular_investment_dates)
                data["regular_investment_dates"].push(item);
        }
        return data; 
    }
}

export interface IInvestment_preferences {
    minimum_initial_investment?: string;
    minimum_regular_monthly_investment?: string;
    regular_investment_frequencies?: string[];
    regular_investment_dates?: string[];
}

export class Withdrawal_preferences implements IWithdrawal_preferences {
    minimum_one_off_withdrawal?: string;
    minimum_regular_withdrawal?: string;
    regular_withdrawal_frequencies?: string[];
    regular_withdrawal_payment_dates?: string[];

    constructor(data?: IWithdrawal_preferences) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.minimum_one_off_withdrawal = _data["minimum_one_off_withdrawal"];
            this.minimum_regular_withdrawal = _data["minimum_regular_withdrawal"];
            if (Array.isArray(_data["regular_withdrawal_frequencies"])) {
                this.regular_withdrawal_frequencies = [] as any;
                for (let item of _data["regular_withdrawal_frequencies"])
                    this.regular_withdrawal_frequencies!.push(item);
            }
            if (Array.isArray(_data["regular_withdrawal_payment_dates"])) {
                this.regular_withdrawal_payment_dates = [] as any;
                for (let item of _data["regular_withdrawal_payment_dates"])
                    this.regular_withdrawal_payment_dates!.push(item);
            }
        }
    }

    static fromJS(data: any): Withdrawal_preferences {
        data = typeof data === 'object' ? data : {};
        let result = new Withdrawal_preferences();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["minimum_one_off_withdrawal"] = this.minimum_one_off_withdrawal;
        data["minimum_regular_withdrawal"] = this.minimum_regular_withdrawal;
        if (Array.isArray(this.regular_withdrawal_frequencies)) {
            data["regular_withdrawal_frequencies"] = [];
            for (let item of this.regular_withdrawal_frequencies)
                data["regular_withdrawal_frequencies"].push(item);
        }
        if (Array.isArray(this.regular_withdrawal_payment_dates)) {
            data["regular_withdrawal_payment_dates"] = [];
            for (let item of this.regular_withdrawal_payment_dates)
                data["regular_withdrawal_payment_dates"].push(item);
        }
        return data; 
    }
}

export interface IWithdrawal_preferences {
    minimum_one_off_withdrawal?: string;
    minimum_regular_withdrawal?: string;
    regular_withdrawal_frequencies?: string[];
    regular_withdrawal_payment_dates?: string[];
}

export class Interest_preferences implements IInterest_preferences {
    pay_interest?: string;
    interest_accrual_basis?: string;
    interest_payment_frequency?: string;

    constructor(data?: IInterest_preferences) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pay_interest = _data["pay_interest"];
            this.interest_accrual_basis = _data["interest_accrual_basis"];
            this.interest_payment_frequency = _data["interest_payment_frequency"];
        }
    }

    static fromJS(data: any): Interest_preferences {
        data = typeof data === 'object' ? data : {};
        let result = new Interest_preferences();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pay_interest"] = this.pay_interest;
        data["interest_accrual_basis"] = this.interest_accrual_basis;
        data["interest_payment_frequency"] = this.interest_payment_frequency;
        return data; 
    }
}

export interface IInterest_preferences {
    pay_interest?: string;
    interest_accrual_basis?: string;
    interest_payment_frequency?: string;
}

export enum PaymentsPayment_type {
    Stripe = "stripe",
}

export enum PaymentsPurpose {
    Cash = "cash",
    Invest = "invest",
}

export class Investment_instructions4 implements IInvestment_instructions4 {
    investment_product_id!: string;
    quantity!: number;

    constructor(data?: IInvestment_instructions4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.investment_product_id = _data["investment_product_id"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): Investment_instructions4 {
        data = typeof data === 'object' ? data : {};
        let result = new Investment_instructions4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investment_product_id"] = this.investment_product_id;
        data["quantity"] = this.quantity;
        return data; 
    }
}

export interface IInvestment_instructions4 {
    investment_product_id: string;
    quantity: number;
}

export enum PaymentsStatus {
    Pending_confirmation = "pending_confirmation",
    Processing = "processing",
    Succeeded = "succeeded",
    Cancelled = "cancelled",
    Failed = "failed",
}

export enum HoldingsType {
    Held = "held",
    Pending = "pending",
    Archived = "archived",
}

export enum HoldingsSubType {
    Instructed = "instructed",
    Confirmed = "confirmed",
    Priced = "priced",
    Rejected = "rejected",
    Settled = "settled",
    Cancelled = "cancelled",
    Held = "held",
}

export enum HoldingsDirection {
    In = "in",
    Out = "out",
    None = "none",
}

export enum Holdings2Type {
    Held = "held",
    Pending = "pending",
    Archived = "archived",
}

export enum Holdings2SubType {
    Instructed = "instructed",
    Confirmed = "confirmed",
    Priced = "priced",
    Rejected = "rejected",
    Settled = "settled",
    Cancelled = "cancelled",
    Held = "held",
}

export enum Holdings2Direction {
    In = "in",
    Out = "out",
    None = "none",
}

export enum Investment_productsAsset_type {
    Funds = "funds",
}

export enum Investment_productsApplicable_financial_products {
    Isa = "isa",
}

export enum Portfolio_templates2Owner {
    Investor = "investor",
}

export class Ratios9 implements IRatios9 {
    investment_product_id!: string;
    /** must be in correct pattern (eg: 25.00, 33.34, 50.25, 100.00) */
    ratio!: string;

    constructor(data?: IRatios9) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.investment_product_id = _data["investment_product_id"];
            this.ratio = _data["ratio"];
        }
    }

    static fromJS(data: any): Ratios9 {
        data = typeof data === 'object' ? data : {};
        let result = new Ratios9();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["investment_product_id"] = this.investment_product_id;
        data["ratio"] = this.ratio;
        return data; 
    }
}

export interface IRatios9 {
    investment_product_id: string;
    /** must be in correct pattern (eg: 25.00, 33.34, 50.25, 100.00) */
    ratio: string;
}

export enum TransactionsStatus {
    Submitted = "submitted",
    Failed = "failed",
}

export enum Transactions2Status {
    Submitted = "submitted",
    Failed = "failed",
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}